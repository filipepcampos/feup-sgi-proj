[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "tp1/.external-ecmascript.js",
    "static": true,
    "longname": "tp1/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "tp1/MyInterface.js",
    "content": "import { CGFinterface, CGFapplication, dat } from '../lib/CGF.js';\nimport { MaterialUpdater } from './rendering/MaterialUpdater.js';\n\n/**\n* MyInterface class, creating a GUI interface.\n*/\nexport class MyInterface extends CGFinterface {\n    /**\n     * @constructor\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * Initializes the interface.\n     * @param {CGFapplication} application\n     */\n    init(application) {\n        super.init(application);\n        // init GUI. For more information on the methods, check:\n        //  http://workshop.chromeexperiments.com/examples/gui\n\n        this.gui = new dat.GUI();\n\n        // add a group of controls (and open/expand by defult)\n\n        this.initKeys();\n\n        return true;\n    }\n\n    onGraphLoaded() {\n        this.materialUpdater = new MaterialUpdater(this.scene.sceneData);\n        this.gui.add(this.scene, 'camerasIds', this.scene.camerasIds)\n            .name('Active Camera')\n            .onChange((value) => this.scene.setCamera(value));\n        let folder = this.gui.addFolder('Lights');\n        for(let i = 0; i < this.scene.lights.length; ++i) {\n            folder.add(this.scene.lights[i], 'enabled')\n                .name(this.scene.lightsIds[i])\n                .onChange((value) => {\n                    this.scene.setLight(i, value);\n            });\n        }\n    }\n\n    /**\n     * initKeys\n     */\n    initKeys() {\n        this.scene.gui=this;\n        this.processKeyboard=function(){};\n        this.activeKeys={};\n    }\n\n    processKeyDown(event) {\n        this.activeKeys[event.code]=true;\n        \n        if(event.code == \"KeyM\") {\n            this.materialUpdater.update();\n        }\n    };\n\n    processKeyUp(event) {\n        this.activeKeys[event.code]=false;\n    };\n\n    isKeyPressed(keyCode) {\n        return this.activeKeys[keyCode] || false;\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/MyInterface.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "MyInterface",
    "memberof": "tp1/MyInterface.js",
    "static": true,
    "longname": "tp1/MyInterface.js~MyInterface",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/MyInterface.js",
    "importStyle": "{MyInterface}",
    "description": "MyInterface class, creating a GUI interface.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "lib/CGF.js~CGFinterface"
    ]
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "tp1/MyInterface.js~MyInterface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/MyInterface.js~MyInterface#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "method",
    "name": "init",
    "memberof": "tp1/MyInterface.js~MyInterface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/MyInterface.js~MyInterface#init",
    "access": "public",
    "description": "Initializes the interface.",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "CGFapplication"
        ],
        "spread": false,
        "optional": false,
        "name": "application",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "gui",
    "memberof": "tp1/MyInterface.js~MyInterface",
    "static": false,
    "longname": "tp1/MyInterface.js~MyInterface#gui",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "onGraphLoaded",
    "memberof": "tp1/MyInterface.js~MyInterface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/MyInterface.js~MyInterface#onGraphLoaded",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "materialUpdater",
    "memberof": "tp1/MyInterface.js~MyInterface",
    "static": false,
    "longname": "tp1/MyInterface.js~MyInterface#materialUpdater",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "initKeys",
    "memberof": "tp1/MyInterface.js~MyInterface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/MyInterface.js~MyInterface#initKeys",
    "access": "public",
    "description": "initKeys",
    "lineNumber": 51,
    "params": [],
    "return": null
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "activeKeys",
    "memberof": "tp1/MyInterface.js~MyInterface",
    "static": false,
    "longname": "tp1/MyInterface.js~MyInterface#activeKeys",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "processKeyDown",
    "memberof": "tp1/MyInterface.js~MyInterface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/MyInterface.js~MyInterface#processKeyDown",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "processKeyUp",
    "memberof": "tp1/MyInterface.js~MyInterface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/MyInterface.js~MyInterface#processKeyUp",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "isKeyPressed",
    "memberof": "tp1/MyInterface.js~MyInterface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/MyInterface.js~MyInterface#isKeyPressed",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "keyCode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "tp1/MySceneGraph.js",
    "content": "import { CGFXMLreader } from '../lib/CGF.js';\nimport {SceneData} from \"./models/SceneData.js\";\nimport {ComponentsLinker} from \"./parser/component/ComponentsLinker.js\";\nimport {ParserErrorPrinter} from \"./parser/ParserErrorPrinter.js\";\nimport {GenericChildParser} from \"./parser/GenericChildParser.js\";\nimport {TransformationParser} from \"./parser/TransformationParser.js\";\nimport {MaterialParser} from \"./parser/MaterialParser.js\";\nimport {ComponentParser} from \"./parser/component/ComponentParser.js\";\nimport {PrimitiveParser} from \"./parser/PrimitiveParser.js\";\nimport {TextureParser} from \"./parser/TextureParser.js\";\nimport {ViewParser} from \"./parser/ViewParser.js\";\nimport { LightsParser } from './parser/LightsParser.js';\nimport {AmbientParser} from \"./parser/AmbientParser.js\";\nimport { MyView } from './models/wrappers/MyView.js';\n\n\n// Order of the groups in the XML document.\nconst SCENE_INDEX = 0;\nconst VIEWS_INDEX = 1;\nconst AMBIENT_INDEX = 2;\nconst LIGHTS_INDEX = 3;\nconst TEXTURES_INDEX = 4;\nconst MATERIALS_INDEX = 5;\nconst TRANSFORMATIONS_INDEX = 6;\nconst PRIMITIVES_INDEX = 7;\nconst COMPONENTS_INDEX = 8;\n\n/**\n * MySceneGraph class, representing the scene graph.\n */\nexport class MySceneGraph {\n    /**\n     * @constructor\n     */\n    constructor(filename, scene) {\n        this.loadedOk = null;\n\n        // Establish bidirectional references between scene and graph.\n        this.scene = scene;\n        this.sceneData = new SceneData(scene);\n        scene.sceneData = this.sceneData;\n\n        this.axisCoords = [];\n        this.axisCoords['x'] = [1, 0, 0];\n        this.axisCoords['y'] = [0, 1, 0];\n        this.axisCoords['z'] = [0, 0, 1];\n\n        // File reading \n        this.reader = new CGFXMLreader();\n\n        /*\n         * Read the contents of the xml file, and refer to this class for loading and error handlers.\n         * After the file is read, the reader calls onXMLReady on this object.\n         * If any error occurs, the reader calls onXMLError on this object, with an error message\n         */\n        this.reader.open('scenes/' + filename, this);\n    }\n\n    /*\n     * Callback to be executed after successful reading\n     */\n    onXMLReady() {\n        this.log(\"XML Loading finished.\");\n        const rootElement = this.reader.xmlDoc.documentElement;\n\n        // Here should go the calls for different functions to parse the various blocks\n        const error = this.parseXMLFile(rootElement);\n\n        if (error != null) {\n            this.onXMLError(error);\n            return;\n        }\n\n        this.loadedOk = true;\n\n        // As the graph loaded ok, signal the scene so that any additional initialization depending on the graph can take place\n        this.scene.onGraphLoaded();\n    }\n\n    /**\n     * Parses the XML file, processing each block.\n     * @param {XML root element} rootElement\n     */\n    parseXMLFile(rootElement) {\n        if (rootElement.nodeName != \"sxs\")\n            return \"root tag <sxs> missing\";\n\n        const nodes = rootElement.children;\n\n        // Reads the names of the nodes to an auxiliary buffer.\n        let nodeNames = [];\n\n        for (let i = 0; i < nodes.length; i++) {\n            nodeNames.push(nodes[i].nodeName);\n        }\n\n        let error;\n\n        // Processes each node, verifying errors.\n        // <scene>\n        let index;\n        if ((index = nodeNames.indexOf(\"scene\")) == -1)\n            return \"tag <scene> missing\";\n        else {\n            if (index != SCENE_INDEX)\n                this.onXMLMinorError(\"tag <scene> out of order \" + index);\n\n            //Parse scene block\n            if ((error = this.parseScene(nodes[index])) != null)\n                return error;\n        }\n\n        // <views>\n        if ((index = nodeNames.indexOf(\"views\")) == -1)\n            return \"tag <views> missing\";\n        else {\n            if (index != VIEWS_INDEX)\n                this.onXMLMinorError(\"tag <views> out of order\");\n\n            //Parse views block\n            if ((error = this.parseView(nodes[index])) != null)\n                return error;\n        }\n\n        // <ambient>\n        if ((index = nodeNames.indexOf(\"ambient\")) == -1)\n            return \"tag <ambient> missing\";\n        else {\n            if (index != AMBIENT_INDEX)\n                this.onXMLMinorError(\"tag <ambient> out of order\");\n\n            //Parse ambient block\n            if ((error = this.parseAmbient(nodes[index])) != null)\n                return error;\n        }\n\n        // <lights>\n        if ((index = nodeNames.indexOf(\"lights\")) == -1)\n            return \"tag <lights> missing\";\n        else {\n            if (index != LIGHTS_INDEX)\n                this.onXMLMinorError(\"tag <lights> out of order\");\n\n            //Parse lights block\n            if ((error = this.parseLights(nodes[index])) != null)\n                return error;\n        }\n        // <textures>\n        if ((index = nodeNames.indexOf(\"textures\")) == -1)\n            return \"tag <textures> missing\";\n        else {\n            if (index != TEXTURES_INDEX)\n                this.onXMLMinorError(\"tag <textures> out of order\");\n\n            //Parse textures block\n            if ((error = this.parseTextures(nodes[index])) != null)\n                return error;\n        }\n\n        // <materials>\n        if ((index = nodeNames.indexOf(\"materials\")) == -1)\n            return \"tag <materials> missing\";\n        else {\n            if (index != MATERIALS_INDEX)\n                this.onXMLMinorError(\"tag <materials> out of order\");\n\n            //Parse materials block\n            if ((error = this.parseMaterials(nodes[index])) != null)\n                return error;\n        }\n\n        // <transformations>\n        if ((index = nodeNames.indexOf(\"transformations\")) == -1)\n            return \"tag <transformations> missing\";\n        else {\n            if (index != TRANSFORMATIONS_INDEX)\n                this.onXMLMinorError(\"tag <transformations> out of order\");\n\n            //Parse transformations block\n            if ((error = this.parseTransformations(nodes[index])) != null)\n                return error;\n        }\n\n        // <primitives>\n        if ((index = nodeNames.indexOf(\"primitives\")) == -1)\n            return \"tag <primitives> missing\";\n        else {\n            if (index != PRIMITIVES_INDEX)\n                this.onXMLMinorError(\"tag <primitives> out of order\");\n\n            //Parse primitives block\n            if ((error = this.parsePrimitives(nodes[index])) != null)\n                return error;\n        }\n\n        // <components>\n        if ((index = nodeNames.indexOf(\"components\")) == -1)\n            return \"tag <components> missing\";\n        else {\n            if (index != COMPONENTS_INDEX)\n                this.onXMLMinorError(\"tag <components> out of order\");\n\n            //Parse components block\n            if ((error = this.parseComponents(nodes[index])) != null)\n                return error;\n        }\n        this.log(\"all parsed\");\n    }\n\n    /**\n     * Parses the <scene> block. \n     * @param {scene block element} sceneNode\n     */\n    parseScene(sceneNode) {\n\n        // Get root of the scene.\n        let root = this.reader.getString(sceneNode, 'root')\n        if (root == null)\n            return \"no root defined for scene\";\n\n        this.sceneData.root = root;\n\n        // Get axis length        \n        let axis_length = this.reader.getFloat(sceneNode, 'axis_length');\n        if (axis_length == null)\n            this.onXMLMinorError(\"no axis_length defined for scene; assuming 'length = 1'\");\n\n        this.sceneData.referenceLength = axis_length || 1;\n\n        return null;\n    }\n\n    /**\n     * Parses the <views> block.\n     * @param {view block element} viewsNode\n     */\n    parseView(viewsNode) {\n        let result = GenericChildParser.parse(viewsNode, this.reader, this.scene, ViewParser, \"view\");\n        ParserErrorPrinter.print(result.getErrors());\n        console.log(\"Views\", result);\n        this.sceneData.views = result.getValue();\n\n        let defaultView = this.reader.getString(viewsNode, 'default');\n        this.sceneData.defaultView = this.reader.getString(viewsNode, 'default');\n\n        if(defaultView == null || !(defaultView in Object.keys(this.sceneData.views)) ) {\n            if(Object.keys(this.sceneData.views).length > 0) {\n                defaultView = Object.keys(this.sceneData.views)[0];\n                this.onXMLMinorError(\"no default view defined, defaulting to view with id=\" + defaultView);\n            } else {\n                defaultView = 'default_view';\n                this.sceneData.views['default_view'] = MyView.instantiate('default_view', 1.5, 0.1, 500, vec3.fromValues(15, 15, 15), vec3.fromValues(0, 0, 0));\n                this.onXMLMinorError(\"no default view defined and no views were defined, creating a default view\");\n            }\n        }\n\n        this.sceneData.defaultView = defaultView;\n\n        return null;\n    }\n\n    /**\n     * Parses the <ambient> node.\n     * @param {ambient block element} ambientsNode\n     */\n    parseAmbient(ambientsNode) {\n        let result = AmbientParser.parse(ambientsNode, this.reader);\n        ParserErrorPrinter.print(result.getErrors());\n        console.log(\"Ambient\", result);\n        this.sceneData.ambient = result.getValue()['ambient'];\n        this.sceneData.background = result.getValue()['background'];\n        return null;\n    }\n\n    /**\n     * Parses the <light> node.\n     * @param {lights block element} lightsNode\n     */\n    parseLights(lightsNode) {\n        let result = LightsParser.parse(lightsNode, this.reader);\n        this.sceneData.lights = result.getValue();\n        ParserErrorPrinter.print(result.getErrors());\n        console.log(\"Lights\", result.getValue());\n        return null;\n    }\n\n    /**\n     * Parses the <textures> block. \n     * @param {textures block element} texturesNode\n     */\n    parseTextures(texturesNode) {\n        let result = GenericChildParser.parse(texturesNode, this.reader, this.scene, TextureParser, \"texture\");\n        this.sceneData.textures = result.getValue();\n        console.log(\"Textures\", result);\n        return null;\n    }\n\n    /**\n     * Parses the <materials> node.\n     * @param {materials block element} materialsNode\n     */\n    parseMaterials(materialsNode) {\n        let result = GenericChildParser.parse(materialsNode, this.reader, this.scene, MaterialParser, \"material\");\n        this.sceneData.materials = result.getValue();\n        console.log(\"Materials\", result);\n        return null;\n    }\n\n    /**\n     * Parses the <transformations> block.\n     * @param {transformations block element} transformationsNode\n     */\n    parseTransformations(transformationsNode) {\n        let result = GenericChildParser.parse(transformationsNode, this.reader, this.scene, TransformationParser, \"transformation\");\n        this.sceneData.transformations = result.getValue();\n        ParserErrorPrinter.print(result.getErrors());\n        console.log(\"Transformations\", result);\n        return null;\n    }\n\n    /**\n     * Parses the <primitives> block.\n     * @param {primitives block element} primitivesNode\n     */\n    parsePrimitives(primitivesNode) {\n        let result = GenericChildParser.parse(primitivesNode, this.reader, this.scene, PrimitiveParser, \"primitive\");\n        this.sceneData.primitives = result.getValue();\n        console.log(\"Primitives\", result);\n        return null;\n    }\n\n    /**\n   * Parses the <components> block.\n   * @param {components block element} componentsNode\n   */\n    parseComponents(componentsNode) {\n        let result = GenericChildParser.parse(componentsNode, this.reader, this.sceneData, ComponentParser, \"component\");\n        ParserErrorPrinter.print(result.getErrors());\n        this.sceneData.components = result.getValue();\n\n        console.log(\"Linking child components\");\n        ParserErrorPrinter.print(ComponentsLinker.link(this.sceneData));\n\n        console.log(\"Components\", result);\n        return null;\n    }\n\n    /**\n     * Parse the color components from a node\n     * @param {block element} node\n     * @param {message to be displayed in case of error} messageError\n     */\n    parseColor(node, messageError) {\n        var color = [];\n\n        // R\n        var r = this.reader.getFloat(node, 'r');\n        if (!(r != null && !isNaN(r) && r >= 0 && r <= 1))\n            return \"unable to parse R component of the \" + messageError;\n\n        // G\n        var g = this.reader.getFloat(node, 'g');\n        if (!(g != null && !isNaN(g) && g >= 0 && g <= 1))\n            return \"unable to parse G component of the \" + messageError;\n\n        // B\n        var b = this.reader.getFloat(node, 'b');\n        if (!(b != null && !isNaN(b) && b >= 0 && b <= 1))\n            return \"unable to parse B component of the \" + messageError;\n\n        // A\n        var a = this.reader.getFloat(node, 'a');\n        if (!(a != null && !isNaN(a) && a >= 0 && a <= 1))\n            return \"unable to parse A component of the \" + messageError;\n\n        color.push(...[r, g, b, a]);\n\n        return color;\n    }\n\n    /*\n     * Callback to be executed on any read error, showing an error on the console.\n     * @param {string} message\n     */\n    onXMLError(message) {\n        console.error(\"XML Loading Error: \" + message);\n        this.loadedOk = false;\n    }\n\n    /**\n     * Callback to be executed on any minor error, showing a warning on the console.\n     * @param {string} message\n     */\n    onXMLMinorError(message) {\n        console.warn(\"Warning: \" + message);\n    }\n\n    /**\n     * Callback to be executed on any message.\n     * @param {string} message\n     */\n    log(message) {\n        console.log(\"   \" + message);\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/MySceneGraph.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "SCENE_INDEX",
    "memberof": "tp1/MySceneGraph.js",
    "static": true,
    "longname": "tp1/MySceneGraph.js~SCENE_INDEX",
    "access": "public",
    "export": false,
    "importPath": "sgi/tp1/MySceneGraph.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "variable",
    "name": "VIEWS_INDEX",
    "memberof": "tp1/MySceneGraph.js",
    "static": true,
    "longname": "tp1/MySceneGraph.js~VIEWS_INDEX",
    "access": "public",
    "export": false,
    "importPath": "sgi/tp1/MySceneGraph.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "name": "AMBIENT_INDEX",
    "memberof": "tp1/MySceneGraph.js",
    "static": true,
    "longname": "tp1/MySceneGraph.js~AMBIENT_INDEX",
    "access": "public",
    "export": false,
    "importPath": "sgi/tp1/MySceneGraph.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "name": "LIGHTS_INDEX",
    "memberof": "tp1/MySceneGraph.js",
    "static": true,
    "longname": "tp1/MySceneGraph.js~LIGHTS_INDEX",
    "access": "public",
    "export": false,
    "importPath": "sgi/tp1/MySceneGraph.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "TEXTURES_INDEX",
    "memberof": "tp1/MySceneGraph.js",
    "static": true,
    "longname": "tp1/MySceneGraph.js~TEXTURES_INDEX",
    "access": "public",
    "export": false,
    "importPath": "sgi/tp1/MySceneGraph.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "MATERIALS_INDEX",
    "memberof": "tp1/MySceneGraph.js",
    "static": true,
    "longname": "tp1/MySceneGraph.js~MATERIALS_INDEX",
    "access": "public",
    "export": false,
    "importPath": "sgi/tp1/MySceneGraph.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "name": "TRANSFORMATIONS_INDEX",
    "memberof": "tp1/MySceneGraph.js",
    "static": true,
    "longname": "tp1/MySceneGraph.js~TRANSFORMATIONS_INDEX",
    "access": "public",
    "export": false,
    "importPath": "sgi/tp1/MySceneGraph.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "name": "PRIMITIVES_INDEX",
    "memberof": "tp1/MySceneGraph.js",
    "static": true,
    "longname": "tp1/MySceneGraph.js~PRIMITIVES_INDEX",
    "access": "public",
    "export": false,
    "importPath": "sgi/tp1/MySceneGraph.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "name": "COMPONENTS_INDEX",
    "memberof": "tp1/MySceneGraph.js",
    "static": true,
    "longname": "tp1/MySceneGraph.js~COMPONENTS_INDEX",
    "access": "public",
    "export": false,
    "importPath": "sgi/tp1/MySceneGraph.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "class",
    "name": "MySceneGraph",
    "memberof": "tp1/MySceneGraph.js",
    "static": true,
    "longname": "tp1/MySceneGraph.js~MySceneGraph",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/MySceneGraph.js",
    "importStyle": "{MySceneGraph}",
    "description": "MySceneGraph class, representing the scene graph.",
    "lineNumber": 31,
    "interface": false
  },
  {
    "__docId__": 71,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "tp1/MySceneGraph.js~MySceneGraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/MySceneGraph.js~MySceneGraph#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "loadedOk",
    "memberof": "tp1/MySceneGraph.js~MySceneGraph",
    "static": false,
    "longname": "tp1/MySceneGraph.js~MySceneGraph#loadedOk",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "scene",
    "memberof": "tp1/MySceneGraph.js~MySceneGraph",
    "static": false,
    "longname": "tp1/MySceneGraph.js~MySceneGraph#scene",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "sceneData",
    "memberof": "tp1/MySceneGraph.js~MySceneGraph",
    "static": false,
    "longname": "tp1/MySceneGraph.js~MySceneGraph#sceneData",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "axisCoords",
    "memberof": "tp1/MySceneGraph.js~MySceneGraph",
    "static": false,
    "longname": "tp1/MySceneGraph.js~MySceneGraph#axisCoords",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "reader",
    "memberof": "tp1/MySceneGraph.js~MySceneGraph",
    "static": false,
    "longname": "tp1/MySceneGraph.js~MySceneGraph#reader",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "onXMLReady",
    "memberof": "tp1/MySceneGraph.js~MySceneGraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/MySceneGraph.js~MySceneGraph#onXMLReady",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "parseXMLFile",
    "memberof": "tp1/MySceneGraph.js~MySceneGraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/MySceneGraph.js~MySceneGraph#parseXMLFile",
    "access": "public",
    "description": "Parses the XML file, processing each block.",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "XML root element"
        ],
        "spread": false,
        "optional": false,
        "name": "rootElement",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "parseScene",
    "memberof": "tp1/MySceneGraph.js~MySceneGraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/MySceneGraph.js~MySceneGraph#parseScene",
    "access": "public",
    "description": "Parses the <scene> block. ",
    "lineNumber": 214,
    "params": [
      {
        "nullable": null,
        "types": [
          "scene block element"
        ],
        "spread": false,
        "optional": false,
        "name": "sceneNode",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "parseView",
    "memberof": "tp1/MySceneGraph.js~MySceneGraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/MySceneGraph.js~MySceneGraph#parseView",
    "access": "public",
    "description": "Parses the <views> block.",
    "lineNumber": 237,
    "params": [
      {
        "nullable": null,
        "types": [
          "view block element"
        ],
        "spread": false,
        "optional": false,
        "name": "viewsNode",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "parseAmbient",
    "memberof": "tp1/MySceneGraph.js~MySceneGraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/MySceneGraph.js~MySceneGraph#parseAmbient",
    "access": "public",
    "description": "Parses the <ambient> node.",
    "lineNumber": 266,
    "params": [
      {
        "nullable": null,
        "types": [
          "ambient block element"
        ],
        "spread": false,
        "optional": false,
        "name": "ambientsNode",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "parseLights",
    "memberof": "tp1/MySceneGraph.js~MySceneGraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/MySceneGraph.js~MySceneGraph#parseLights",
    "access": "public",
    "description": "Parses the <light> node.",
    "lineNumber": 279,
    "params": [
      {
        "nullable": null,
        "types": [
          "lights block element"
        ],
        "spread": false,
        "optional": false,
        "name": "lightsNode",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "parseTextures",
    "memberof": "tp1/MySceneGraph.js~MySceneGraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/MySceneGraph.js~MySceneGraph#parseTextures",
    "access": "public",
    "description": "Parses the <textures> block. ",
    "lineNumber": 291,
    "params": [
      {
        "nullable": null,
        "types": [
          "textures block element"
        ],
        "spread": false,
        "optional": false,
        "name": "texturesNode",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "parseMaterials",
    "memberof": "tp1/MySceneGraph.js~MySceneGraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/MySceneGraph.js~MySceneGraph#parseMaterials",
    "access": "public",
    "description": "Parses the <materials> node.",
    "lineNumber": 302,
    "params": [
      {
        "nullable": null,
        "types": [
          "materials block element"
        ],
        "spread": false,
        "optional": false,
        "name": "materialsNode",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "parseTransformations",
    "memberof": "tp1/MySceneGraph.js~MySceneGraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/MySceneGraph.js~MySceneGraph#parseTransformations",
    "access": "public",
    "description": "Parses the <transformations> block.",
    "lineNumber": 313,
    "params": [
      {
        "nullable": null,
        "types": [
          "transformations block element"
        ],
        "spread": false,
        "optional": false,
        "name": "transformationsNode",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "parsePrimitives",
    "memberof": "tp1/MySceneGraph.js~MySceneGraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/MySceneGraph.js~MySceneGraph#parsePrimitives",
    "access": "public",
    "description": "Parses the <primitives> block.",
    "lineNumber": 325,
    "params": [
      {
        "nullable": null,
        "types": [
          "primitives block element"
        ],
        "spread": false,
        "optional": false,
        "name": "primitivesNode",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "parseComponents",
    "memberof": "tp1/MySceneGraph.js~MySceneGraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/MySceneGraph.js~MySceneGraph#parseComponents",
    "access": "public",
    "description": "Parses the <components> block.",
    "lineNumber": 336,
    "params": [
      {
        "nullable": null,
        "types": [
          "components block element"
        ],
        "spread": false,
        "optional": false,
        "name": "componentsNode",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "parseColor",
    "memberof": "tp1/MySceneGraph.js~MySceneGraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/MySceneGraph.js~MySceneGraph#parseColor",
    "access": "public",
    "description": "Parse the color components from a node",
    "lineNumber": 353,
    "params": [
      {
        "nullable": null,
        "types": [
          "block element"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "message to be displayed in case of error"
        ],
        "spread": false,
        "optional": false,
        "name": "messageError",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "onXMLError",
    "memberof": "tp1/MySceneGraph.js~MySceneGraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/MySceneGraph.js~MySceneGraph#onXMLError",
    "access": "public",
    "description": null,
    "lineNumber": 385,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "onXMLMinorError",
    "memberof": "tp1/MySceneGraph.js~MySceneGraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/MySceneGraph.js~MySceneGraph#onXMLMinorError",
    "access": "public",
    "description": "Callback to be executed on any minor error, showing a warning on the console.",
    "lineNumber": 394,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "log",
    "memberof": "tp1/MySceneGraph.js~MySceneGraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/MySceneGraph.js~MySceneGraph#log",
    "access": "public",
    "description": "Callback to be executed on any message.",
    "lineNumber": 402,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "tp1/XMLscene.js",
    "content": "import { CGFscene } from '../lib/CGF.js';\nimport { CGFaxis,CGFcamera } from '../lib/CGF.js';\nimport {SceneRenderer} from \"./rendering/SceneRenderer.js\";\n\n\nvar DEGREE_TO_RAD = Math.PI / 180;\n\n/**\n * XMLscene class, representing the scene that is to be rendered.\n */\nexport class XMLscene extends CGFscene {\n    /**\n     * @constructor\n     * @param {MyInterface} myinterface \n     */\n    constructor(myinterface) {\n        super();\n\n        this.interface = myinterface;\n    }\n\n    /**\n     * Initializes the scene, setting some WebGL defaults, initializing the camera and the axis.\n     * @param {CGFApplication} application\n     */\n    init(application) {\n        super.init(application);\n\n        this.sceneInited = false;\n\n        this.initDefaultCameras();\n\n        this.enableTextures(true);\n\n        this.gl.clearDepth(100.0);\n        this.gl.enable(this.gl.DEPTH_TEST);\n        this.gl.enable(this.gl.CULL_FACE);\n        this.gl.depthFunc(this.gl.LEQUAL);\n\n        this.axis = new CGFaxis(this);\n        this.setUpdatePeriod(100);\n    }\n\n    /**\n     * Initializes the scene cameras.\n     */\n    initDefaultCameras() {\n        this.camera = new CGFcamera(0.4, 0.1, 500, vec3.fromValues(15, 15, 15), vec3.fromValues(0, 0, 0));\n    }\n\n    // todo:\n    initCameras() {\n        this.setCamera(this.sceneData.defaultView);\n        this.camerasIds = Object.keys(this.sceneData.views);\n    }\n\n    setCamera(cameraId) {\n        this.camera = this.sceneData.views[cameraId].getCGFCamera();\n        this.interface.setActiveCamera(this.camera);\n    }\n\n    setLight(lightIndex, enabled) {\n        if(enabled) {\n            this.lights[lightIndex].enable();\n        } else {\n            this.lights[lightIndex].disable();\n        }\n        this.lights[lightIndex].update();\n    }\n\n\n    /**\n     * Initializes the scene lights with the values read from the XML file.\n     */\n    initLights() {\n        var i = 0;\n        // Lights index.\n\n        // Reads the lights from the scene graph.\n        this.lightsIds = [];\n        for (var key in this.sceneData.lights) {\n            if (i >= 8)\n                break;              // Only eight lights allowed by WebGL.\n\n            if (this.sceneData.lights.hasOwnProperty(key)) {\n                this.lightsIds.push(key);\n                var light = this.sceneData.lights[key];\n\n                this.lights[i].setPosition(light[2][0], light[2][1], light[2][2], light[2][3]);\n                this.lights[i].setAmbient(light[3][0], light[3][1], light[3][2], light[3][3]);\n                this.lights[i].setDiffuse(light[4][0], light[4][1], light[4][2], light[4][3]);\n                this.lights[i].setSpecular(light[5][0], light[5][1], light[5][2], light[5][3]);\n\n                if (light[1] == \"spot\") {\n                    this.lights[i].setSpotCutOff(light[6]);\n                    this.lights[i].setSpotExponent(light[7]);\n                    this.lights[i].setSpotDirection(light[8][0], light[8][1], light[8][2]);\n                }\n\n                this.lights[i].setVisible(true);\n                if (light[0])\n                    this.lights[i].enable();\n                else\n                    this.lights[i].disable();\n\n                this.lights[i].update();\n\n                i++;\n            }\n        }\n        this.lights = this.lights.slice(0, i);\n    }\n\n    setDefaultAppearance() {\n        this.setAmbient(0.2, 0.4, 0.8, 1.0);\n        this.setDiffuse(0.2, 0.4, 0.8, 1.0);\n        this.setSpecular(0.2, 0.4, 0.8, 1.0);\n        this.setShininess(10.0);\n    }\n    /** Handler called when the graph is finally loaded. \n     * As loading is asynchronous, this may be called already after the application has started the run loop\n     */\n    onGraphLoaded() {\n        this.axis = new CGFaxis(this, this.sceneData.referenceLength);\n\n        this.gl.clearColor(this.sceneData.background[0], this.sceneData.background[1], this.sceneData.background[2], this.sceneData.background[3]);\n\n        this.setGlobalAmbientLight(this.sceneData.ambient[0], this.sceneData.ambient[1], this.sceneData.ambient[2], this.sceneData.ambient[3]);\n\n        this.initLights();\n        this.initCameras();\n\n        this.renderer = new SceneRenderer(this.sceneData);\n\n        this.interface.onGraphLoaded();\n\n        this.sceneInited = true;\n    }\n\n    /**\n     * Displays the scene.\n     */\n    display() {\n        // ---- BEGIN Background, camera and axis setup\n\n        // Clear image and depth buffer everytime we update the scene\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n\n        // Initialize Model-View matrix as identity (no transformation\n        this.updateProjectionMatrix();\n        this.loadIdentity();\n\n        // Apply transformations corresponding to the camera position relative to the origin\n        this.applyViewMatrix();\n\n        this.pushMatrix();\n        this.axis.display();\n\n        for (var i = 0; i < this.lights.length; i++) {\n            this.lights[i].setVisible(true);\n            this.lights[i].update();\n        }\n\n        if (this.sceneInited) {\n            // Draw axis\n            this.setDefaultAppearance();\n\n            // Displays the scene.\n            this.renderer.display();\n        }\n\n        this.popMatrix();\n        // ---- END Background, camera and axis setup\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/XMLscene.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "name": "DEGREE_TO_RAD",
    "memberof": "tp1/XMLscene.js",
    "static": true,
    "longname": "tp1/XMLscene.js~DEGREE_TO_RAD",
    "access": "public",
    "export": false,
    "importPath": "sgi/tp1/XMLscene.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 96,
    "kind": "class",
    "name": "XMLscene",
    "memberof": "tp1/XMLscene.js",
    "static": true,
    "longname": "tp1/XMLscene.js~XMLscene",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/XMLscene.js",
    "importStyle": "{XMLscene}",
    "description": "XMLscene class, representing the scene that is to be rendered.",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "lib/CGF.js~CGFscene"
    ]
  },
  {
    "__docId__": 97,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "tp1/XMLscene.js~XMLscene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/XMLscene.js~XMLscene#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MyInterface"
        ],
        "spread": false,
        "optional": false,
        "name": "myinterface",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "interface",
    "memberof": "tp1/XMLscene.js~XMLscene",
    "static": false,
    "longname": "tp1/XMLscene.js~XMLscene#interface",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "init",
    "memberof": "tp1/XMLscene.js~XMLscene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/XMLscene.js~XMLscene#init",
    "access": "public",
    "description": "Initializes the scene, setting some WebGL defaults, initializing the camera and the axis.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "CGFApplication"
        ],
        "spread": false,
        "optional": false,
        "name": "application",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 100,
    "kind": "member",
    "name": "sceneInited",
    "memberof": "tp1/XMLscene.js~XMLscene",
    "static": false,
    "longname": "tp1/XMLscene.js~XMLscene#sceneInited",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "member",
    "name": "axis",
    "memberof": "tp1/XMLscene.js~XMLscene",
    "static": false,
    "longname": "tp1/XMLscene.js~XMLscene#axis",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "initDefaultCameras",
    "memberof": "tp1/XMLscene.js~XMLscene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/XMLscene.js~XMLscene#initDefaultCameras",
    "access": "public",
    "description": "Initializes the scene cameras.",
    "lineNumber": 47,
    "params": [],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "member",
    "name": "camera",
    "memberof": "tp1/XMLscene.js~XMLscene",
    "static": false,
    "longname": "tp1/XMLscene.js~XMLscene#camera",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "initCameras",
    "memberof": "tp1/XMLscene.js~XMLscene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/XMLscene.js~XMLscene#initCameras",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 105,
    "kind": "member",
    "name": "camerasIds",
    "memberof": "tp1/XMLscene.js~XMLscene",
    "static": false,
    "longname": "tp1/XMLscene.js~XMLscene#camerasIds",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "setCamera",
    "memberof": "tp1/XMLscene.js~XMLscene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/XMLscene.js~XMLscene#setCamera",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "cameraId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "setLight",
    "memberof": "tp1/XMLscene.js~XMLscene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/XMLscene.js~XMLscene#setLight",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [
      {
        "name": "lightIndex",
        "types": [
          "*"
        ]
      },
      {
        "name": "enabled",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "initLights",
    "memberof": "tp1/XMLscene.js~XMLscene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/XMLscene.js~XMLscene#initLights",
    "access": "public",
    "description": "Initializes the scene lights with the values read from the XML file.",
    "lineNumber": 75,
    "params": [],
    "return": null
  },
  {
    "__docId__": 110,
    "kind": "member",
    "name": "lightsIds",
    "memberof": "tp1/XMLscene.js~XMLscene",
    "static": false,
    "longname": "tp1/XMLscene.js~XMLscene#lightsIds",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "member",
    "name": "lights",
    "memberof": "tp1/XMLscene.js~XMLscene",
    "static": false,
    "longname": "tp1/XMLscene.js~XMLscene#lights",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "setDefaultAppearance",
    "memberof": "tp1/XMLscene.js~XMLscene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/XMLscene.js~XMLscene#setDefaultAppearance",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "onGraphLoaded",
    "memberof": "tp1/XMLscene.js~XMLscene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/XMLscene.js~XMLscene#onGraphLoaded",
    "access": "public",
    "description": "Handler called when the graph is finally loaded. \nAs loading is asynchronous, this may be called already after the application has started the run loop",
    "lineNumber": 123,
    "params": [],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "member",
    "name": "renderer",
    "memberof": "tp1/XMLscene.js~XMLscene",
    "static": false,
    "longname": "tp1/XMLscene.js~XMLscene#renderer",
    "access": "public",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "display",
    "memberof": "tp1/XMLscene.js~XMLscene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/XMLscene.js~XMLscene#display",
    "access": "public",
    "description": "Displays the scene.",
    "lineNumber": 143,
    "params": [],
    "return": null
  },
  {
    "__docId__": 118,
    "kind": "file",
    "name": "tp1/main.js",
    "content": "import { CGFapplication } from '../lib/CGF.js';\nimport { XMLscene } from './XMLscene.js';\nimport { MyInterface } from './MyInterface.js';\nimport { MySceneGraph } from './MySceneGraph.js';\n\nfunction getUrlVars() {\n    var vars = {};\n    var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi,    \n    function(m,key,value) {\n      vars[decodeURIComponent(key)] = decodeURIComponent(value);\n    });\n    return vars;\n}\t \n\nfunction main() {\n\n\t// Standard application, scene and interface setup\n    var app = new CGFapplication(document.body);\n    var myInterface = new MyInterface();\n    var myScene = new XMLscene(myInterface);\n\n    app.init();\n\n    app.setScene(myScene);\n    app.setInterface(myInterface);\n\n    myInterface.setActiveCamera(myScene.camera);\n\n\t// get file name provided in URL, e.g. http://localhost/myproj/?file=myfile.xml \n\t// or use \"demo.xml\" as default (assumes files in subfolder \"scenes\", check MySceneGraph constructor) \n\t\n    var filename=getUrlVars()['file'] || \"demo.xml\";\n\n\t// create and load graph, and associate it to scene. \n\t// Check console for loading errors\n\tvar myGraph = new MySceneGraph(filename, myScene);\n\t\n\t// start\n    app.run();\n}\n\nmain();\n",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/main.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "getUrlVars",
    "memberof": "tp1/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/main.js~getUrlVars",
    "access": "public",
    "export": false,
    "importPath": "sgi/tp1/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 120,
    "kind": "function",
    "name": "main",
    "memberof": "tp1/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/main.js~main",
    "access": "public",
    "export": false,
    "importPath": "sgi/tp1/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 121,
    "kind": "file",
    "name": "tp1/models/Color.js",
    "content": "/**\n * Model representing a RGBA color\n */\nexport class Color {\n    /**\n     * @param {float} r - Red component\n     * @param {float} g - Green component\n     * @param {float} b - Blue component\n     * @param {float} a - Alpha component\n     */\n    constructor(r, g, b, a){\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n    }\n\n    /**\n     * Gets the color components in a [r, g, b, a] array\n     * @returns {Array<float>} - Color components\n     */\n    getArray() {\n        return [this.r, this.g, this.b, this.a];\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/models/Color.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 122,
    "kind": "class",
    "name": "Color",
    "memberof": "tp1/models/Color.js",
    "static": true,
    "longname": "tp1/models/Color.js~Color",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/models/Color.js",
    "importStyle": "{Color}",
    "description": "Model representing a RGBA color",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 123,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "tp1/models/Color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/Color.js~Color#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "Red component"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "g",
        "description": "Green component"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "Blue component"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "Alpha component"
      }
    ]
  },
  {
    "__docId__": 124,
    "kind": "member",
    "name": "r",
    "memberof": "tp1/models/Color.js~Color",
    "static": false,
    "longname": "tp1/models/Color.js~Color#r",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "g",
    "memberof": "tp1/models/Color.js~Color",
    "static": false,
    "longname": "tp1/models/Color.js~Color#g",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "b",
    "memberof": "tp1/models/Color.js~Color",
    "static": false,
    "longname": "tp1/models/Color.js~Color#b",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "member",
    "name": "a",
    "memberof": "tp1/models/Color.js~Color",
    "static": false,
    "longname": "tp1/models/Color.js~Color#a",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "getArray",
    "memberof": "tp1/models/Color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/Color.js~Color#getArray",
    "access": "public",
    "description": "Gets the color components in a [r, g, b, a] array",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<float>} - Color components"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<float>"
      ],
      "spread": false,
      "description": "Color components"
    },
    "params": []
  },
  {
    "__docId__": 129,
    "kind": "file",
    "name": "tp1/models/Coordinate3D.js",
    "content": "/**\n * Model representing a 3D coordinate\n */\nexport class Coordinate3D {\n    /**\n     * @param {float} x - x coordinate\n     * @param {float} y - y coordinate\n     * @param {float} z - z coordinate\n     */\n    constructor(x, y, z){\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    /**\n     * Gets the coordinate components in a [x, y, z] array\n     * @returns {Array<float>} - Coordinate components\n     */\n    getArray() {\n        return [this.x, this.y, this.z];\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/models/Coordinate3D.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 130,
    "kind": "class",
    "name": "Coordinate3D",
    "memberof": "tp1/models/Coordinate3D.js",
    "static": true,
    "longname": "tp1/models/Coordinate3D.js~Coordinate3D",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/models/Coordinate3D.js",
    "importStyle": "{Coordinate3D}",
    "description": "Model representing a 3D coordinate",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 131,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "tp1/models/Coordinate3D.js~Coordinate3D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/Coordinate3D.js~Coordinate3D#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "x coordinate"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "y coordinate"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "z coordinate"
      }
    ]
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "x",
    "memberof": "tp1/models/Coordinate3D.js~Coordinate3D",
    "static": false,
    "longname": "tp1/models/Coordinate3D.js~Coordinate3D#x",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "y",
    "memberof": "tp1/models/Coordinate3D.js~Coordinate3D",
    "static": false,
    "longname": "tp1/models/Coordinate3D.js~Coordinate3D#y",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "z",
    "memberof": "tp1/models/Coordinate3D.js~Coordinate3D",
    "static": false,
    "longname": "tp1/models/Coordinate3D.js~Coordinate3D#z",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "getArray",
    "memberof": "tp1/models/Coordinate3D.js~Coordinate3D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/Coordinate3D.js~Coordinate3D#getArray",
    "access": "public",
    "description": "Gets the coordinate components in a [x, y, z] array",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<float>} - Coordinate components"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<float>"
      ],
      "spread": false,
      "description": "Coordinate components"
    },
    "params": []
  },
  {
    "__docId__": 136,
    "kind": "file",
    "name": "tp1/models/Rotation.js",
    "content": "/**\n * Model that represents a rotation\n */\nexport class Rotation {\n    /**\n     * @param {string} axis - Axis of the rotation\n     * @param {number} angle - Angle of the rotation in degrees\n     */\n    constructor(axis, angle){\n        this.axis = axis;\n        let DEGREE_TO_RAD = Math.PI / 180;\n        this.angle = angle * DEGREE_TO_RAD;\n    }\n\n    /**\n     * Gets the axis array representation\n     * @returns Axis array representation\n     */\n    getAxisArray(){\n        switch (this.axis) {\n            case 'x': return [1, 0, 0];\n            case 'y': return [0, 1, 0];\n            case 'z': return [0, 0, 1];\n        }\n        return [0, 0, 0];\n    }\n\n    /**\n     * Gets the angle of the rotation in degrees\n     * @returns Angle of the rotation in radians\n     */\n    getAngle() {\n        return this.angle;\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/models/Rotation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 137,
    "kind": "class",
    "name": "Rotation",
    "memberof": "tp1/models/Rotation.js",
    "static": true,
    "longname": "tp1/models/Rotation.js~Rotation",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/models/Rotation.js",
    "importStyle": "{Rotation}",
    "description": "Model that represents a rotation",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 138,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "tp1/models/Rotation.js~Rotation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/Rotation.js~Rotation#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "axis",
        "description": "Axis of the rotation"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "Angle of the rotation in degrees"
      }
    ]
  },
  {
    "__docId__": 139,
    "kind": "member",
    "name": "axis",
    "memberof": "tp1/models/Rotation.js~Rotation",
    "static": false,
    "longname": "tp1/models/Rotation.js~Rotation#axis",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "angle",
    "memberof": "tp1/models/Rotation.js~Rotation",
    "static": false,
    "longname": "tp1/models/Rotation.js~Rotation#angle",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "getAxisArray",
    "memberof": "tp1/models/Rotation.js~Rotation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/Rotation.js~Rotation#getAxisArray",
    "access": "public",
    "description": "Gets the axis array representation",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Axis array representation"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Axis array representation"
    },
    "params": []
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "getAngle",
    "memberof": "tp1/models/Rotation.js~Rotation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/Rotation.js~Rotation#getAngle",
    "access": "public",
    "description": "Gets the angle of the rotation in degrees",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Angle of the rotation in radians"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Angle of the rotation in radians"
    },
    "params": []
  },
  {
    "__docId__": 143,
    "kind": "file",
    "name": "tp1/models/SceneData.js",
    "content": "/**\n * Model that contains information about a scene\n */\nexport class SceneData {\n    /**\n     * @param {CGFscene} scene - Reference to the CGFscene\n     */\n    constructor(scene) {\n        // Global values\n        this.scene = scene;\n        this.root = null;\n        this.referenceLength = 1;\n        this.ambient = [];\n        this.background = [];\n\n        // Active (default) values\n        this.defaultView = \"\";\n\n        // Lists of elements\n        this.views = {};\n        this.lights = {};\n        this.textures = {};\n        this.materials = {};\n        this.transformations = {};\n        this.primitives = {};\n        this.components = {}\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/models/SceneData.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 144,
    "kind": "class",
    "name": "SceneData",
    "memberof": "tp1/models/SceneData.js",
    "static": true,
    "longname": "tp1/models/SceneData.js~SceneData",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/models/SceneData.js",
    "importStyle": "{SceneData}",
    "description": "Model that contains information about a scene",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 145,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "tp1/models/SceneData.js~SceneData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/SceneData.js~SceneData#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "CGFscene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "Reference to the CGFscene"
      }
    ]
  },
  {
    "__docId__": 146,
    "kind": "member",
    "name": "scene",
    "memberof": "tp1/models/SceneData.js~SceneData",
    "static": false,
    "longname": "tp1/models/SceneData.js~SceneData#scene",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "member",
    "name": "root",
    "memberof": "tp1/models/SceneData.js~SceneData",
    "static": false,
    "longname": "tp1/models/SceneData.js~SceneData#root",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "member",
    "name": "referenceLength",
    "memberof": "tp1/models/SceneData.js~SceneData",
    "static": false,
    "longname": "tp1/models/SceneData.js~SceneData#referenceLength",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "member",
    "name": "ambient",
    "memberof": "tp1/models/SceneData.js~SceneData",
    "static": false,
    "longname": "tp1/models/SceneData.js~SceneData#ambient",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "member",
    "name": "background",
    "memberof": "tp1/models/SceneData.js~SceneData",
    "static": false,
    "longname": "tp1/models/SceneData.js~SceneData#background",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "member",
    "name": "defaultView",
    "memberof": "tp1/models/SceneData.js~SceneData",
    "static": false,
    "longname": "tp1/models/SceneData.js~SceneData#defaultView",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "member",
    "name": "views",
    "memberof": "tp1/models/SceneData.js~SceneData",
    "static": false,
    "longname": "tp1/models/SceneData.js~SceneData#views",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "member",
    "name": "lights",
    "memberof": "tp1/models/SceneData.js~SceneData",
    "static": false,
    "longname": "tp1/models/SceneData.js~SceneData#lights",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "member",
    "name": "textures",
    "memberof": "tp1/models/SceneData.js~SceneData",
    "static": false,
    "longname": "tp1/models/SceneData.js~SceneData#textures",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "member",
    "name": "materials",
    "memberof": "tp1/models/SceneData.js~SceneData",
    "static": false,
    "longname": "tp1/models/SceneData.js~SceneData#materials",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "member",
    "name": "transformations",
    "memberof": "tp1/models/SceneData.js~SceneData",
    "static": false,
    "longname": "tp1/models/SceneData.js~SceneData#transformations",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "member",
    "name": "primitives",
    "memberof": "tp1/models/SceneData.js~SceneData",
    "static": false,
    "longname": "tp1/models/SceneData.js~SceneData#primitives",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "member",
    "name": "components",
    "memberof": "tp1/models/SceneData.js~SceneData",
    "static": false,
    "longname": "tp1/models/SceneData.js~SceneData#components",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "file",
    "name": "tp1/models/graph/ComponentNode.js",
    "content": "/**\n * Component Node representation, contains data from <component>\n */\n export class ComponentNode {\n    /**\n    * @param {string} id - Node id\n    * @param {MyTransformation} transformation - Id of the transformation used\n    * @param {Array<MyMaterial>} materials - List of the materials used, can be MyMaterial or \"inherit\"\n    * @param {MyTexture|string} texture - Texture used, can be \"inherit\", \"none\" or a MyTexture object\n    * @param {Array<string>} childComponentsId - Ids of all the children components\n    * @param {Array<string>} childPrimitivesId - Ids of all the children primitives\n    */\n    constructor(id, transformation, materials, texture, childComponentsId, childPrimitivesId) {\n        this.id = id;\n        this.transformation = transformation;\n        this.materials = materials;\n        this.currentMaterial = 0;\n        this.texture = texture;\n        this.childComponentsId = childComponentsId;\n        this.childPrimitivesId = childPrimitivesId;\n    }\n\n    /**\n     * Get the id of the component\n     * @returns {string} - Id of the component\n     */\n    getId() {\n        return this.id;\n    }\n\n    /**\n     * Set the component's children, components or primitives\n     * @param {MyComponentNode|MyPrimitiveNode} children - Array of child nodes\n     */\n    setChildren(children) {\n        this.children = children;\n    }\n\n    /**\n     * Get list of child nodes\n     * @returns {Array<MyComponentNode|MyPrimitiveNode>} - List of the children\n     */\n    getChildren() {\n        return this.children;\n    }\n\n    /**\n     * Get the transformation object\n     * @returns {MyTransformation} transformation - Transformation object\n     */\n    getTransformation() {\n        return this.transformation;\n    }\n\n    /**\n     * Get the current material object\n     * @returns {MyMaterial|string} - Current material object or \"inherit\"\n     */\n    getMaterial() {\n        return this.materials[this.currentMaterial];\n    }\n\n    /**\n     * Get the texture object\n     * @returns {MyTexture|string} - Texture object or \"inherit\" or \"none\"\n     */\n    getTexture() {\n        return this.texture;\n    }\n\n    /**\n     * Update current material to the next one on the materials list\n     */\n    updateMaterial() {\n        this.currentMaterial = (this.currentMaterial + 1) % this.materials.length;\n    }\n}\n",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/models/graph/ComponentNode.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 160,
    "kind": "class",
    "name": "ComponentNode",
    "memberof": "tp1/models/graph/ComponentNode.js",
    "static": true,
    "longname": "tp1/models/graph/ComponentNode.js~ComponentNode",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/models/graph/ComponentNode.js",
    "importStyle": "{ComponentNode}",
    "description": "Component Node representation, contains data from <component>",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 161,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "tp1/models/graph/ComponentNode.js~ComponentNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/graph/ComponentNode.js~ComponentNode#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Node id"
      },
      {
        "nullable": null,
        "types": [
          "MyTransformation"
        ],
        "spread": false,
        "optional": false,
        "name": "transformation",
        "description": "Id of the transformation used"
      },
      {
        "nullable": null,
        "types": [
          "Array<MyMaterial>"
        ],
        "spread": false,
        "optional": false,
        "name": "materials",
        "description": "List of the materials used, can be MyMaterial or \"inherit\""
      },
      {
        "nullable": null,
        "types": [
          "MyTexture",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "texture",
        "description": "Texture used, can be \"inherit\", \"none\" or a MyTexture object"
      },
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "childComponentsId",
        "description": "Ids of all the children components"
      },
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "childPrimitivesId",
        "description": "Ids of all the children primitives"
      }
    ]
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "id",
    "memberof": "tp1/models/graph/ComponentNode.js~ComponentNode",
    "static": false,
    "longname": "tp1/models/graph/ComponentNode.js~ComponentNode#id",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "transformation",
    "memberof": "tp1/models/graph/ComponentNode.js~ComponentNode",
    "static": false,
    "longname": "tp1/models/graph/ComponentNode.js~ComponentNode#transformation",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "member",
    "name": "materials",
    "memberof": "tp1/models/graph/ComponentNode.js~ComponentNode",
    "static": false,
    "longname": "tp1/models/graph/ComponentNode.js~ComponentNode#materials",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "currentMaterial",
    "memberof": "tp1/models/graph/ComponentNode.js~ComponentNode",
    "static": false,
    "longname": "tp1/models/graph/ComponentNode.js~ComponentNode#currentMaterial",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "texture",
    "memberof": "tp1/models/graph/ComponentNode.js~ComponentNode",
    "static": false,
    "longname": "tp1/models/graph/ComponentNode.js~ComponentNode#texture",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "childComponentsId",
    "memberof": "tp1/models/graph/ComponentNode.js~ComponentNode",
    "static": false,
    "longname": "tp1/models/graph/ComponentNode.js~ComponentNode#childComponentsId",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "childPrimitivesId",
    "memberof": "tp1/models/graph/ComponentNode.js~ComponentNode",
    "static": false,
    "longname": "tp1/models/graph/ComponentNode.js~ComponentNode#childPrimitivesId",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "getId",
    "memberof": "tp1/models/graph/ComponentNode.js~ComponentNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/graph/ComponentNode.js~ComponentNode#getId",
    "access": "public",
    "description": "Get the id of the component",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - Id of the component"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Id of the component"
    },
    "params": []
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "setChildren",
    "memberof": "tp1/models/graph/ComponentNode.js~ComponentNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/graph/ComponentNode.js~ComponentNode#setChildren",
    "access": "public",
    "description": "Set the component's children, components or primitives",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "MyComponentNode",
          "MyPrimitiveNode"
        ],
        "spread": false,
        "optional": false,
        "name": "children",
        "description": "Array of child nodes"
      }
    ],
    "return": null
  },
  {
    "__docId__": 171,
    "kind": "member",
    "name": "children",
    "memberof": "tp1/models/graph/ComponentNode.js~ComponentNode",
    "static": false,
    "longname": "tp1/models/graph/ComponentNode.js~ComponentNode#children",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "getChildren",
    "memberof": "tp1/models/graph/ComponentNode.js~ComponentNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/graph/ComponentNode.js~ComponentNode#getChildren",
    "access": "public",
    "description": "Get list of child nodes",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<MyComponentNode|MyPrimitiveNode>} - List of the children"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<MyComponentNode|MyPrimitiveNode>"
      ],
      "spread": false,
      "description": "List of the children"
    },
    "params": []
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "getTransformation",
    "memberof": "tp1/models/graph/ComponentNode.js~ComponentNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/graph/ComponentNode.js~ComponentNode#getTransformation",
    "access": "public",
    "description": "Get the transformation object",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MyTransformation} transformation - Transformation object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MyTransformation"
      ],
      "spread": false,
      "description": "transformation - Transformation object"
    },
    "params": []
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "getMaterial",
    "memberof": "tp1/models/graph/ComponentNode.js~ComponentNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/graph/ComponentNode.js~ComponentNode#getMaterial",
    "access": "public",
    "description": "Get the current material object",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MyMaterial|string} - Current material object or \"inherit\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MyMaterial",
        "string"
      ],
      "spread": false,
      "description": "Current material object or \"inherit\""
    },
    "params": []
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "getTexture",
    "memberof": "tp1/models/graph/ComponentNode.js~ComponentNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/graph/ComponentNode.js~ComponentNode#getTexture",
    "access": "public",
    "description": "Get the texture object",
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MyTexture|string} - Texture object or \"inherit\" or \"none\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MyTexture",
        "string"
      ],
      "spread": false,
      "description": "Texture object or \"inherit\" or \"none\""
    },
    "params": []
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "updateMaterial",
    "memberof": "tp1/models/graph/ComponentNode.js~ComponentNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/graph/ComponentNode.js~ComponentNode#updateMaterial",
    "access": "public",
    "description": "Update current material to the next one on the materials list",
    "lineNumber": 74,
    "params": [],
    "return": null
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "tp1/models/graph/PrimitiveNode.js",
    "content": "/**\n * Model that represents a primitive node\n */\nexport class PrimitiveNode {\n    /**\n     * @param {string} id - id of the node\n     * @param {CGFobject} CGFObject - Reference to the CGFobject\n     */\n    constructor(id, CGFObject) {\n        this.id = id;\n        this.object = CGFObject;\n    }\n\n    /**\n     * Gets the id of the node\n     * @returns id of the node\n     */\n    getId() {\n        return this.id;\n    }\n\n    /**\n     * Gets the CGFobject reference\n     * @returns CGFobject reference\n     */\n    getObject() {\n        return this.object;\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/models/graph/PrimitiveNode.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "class",
    "name": "PrimitiveNode",
    "memberof": "tp1/models/graph/PrimitiveNode.js",
    "static": true,
    "longname": "tp1/models/graph/PrimitiveNode.js~PrimitiveNode",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/models/graph/PrimitiveNode.js",
    "importStyle": "{PrimitiveNode}",
    "description": "Model that represents a primitive node",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 180,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "tp1/models/graph/PrimitiveNode.js~PrimitiveNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/graph/PrimitiveNode.js~PrimitiveNode#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "id of the node"
      },
      {
        "nullable": null,
        "types": [
          "CGFobject"
        ],
        "spread": false,
        "optional": false,
        "name": "CGFObject",
        "description": "Reference to the CGFobject"
      }
    ]
  },
  {
    "__docId__": 181,
    "kind": "member",
    "name": "id",
    "memberof": "tp1/models/graph/PrimitiveNode.js~PrimitiveNode",
    "static": false,
    "longname": "tp1/models/graph/PrimitiveNode.js~PrimitiveNode#id",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "object",
    "memberof": "tp1/models/graph/PrimitiveNode.js~PrimitiveNode",
    "static": false,
    "longname": "tp1/models/graph/PrimitiveNode.js~PrimitiveNode#object",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "getId",
    "memberof": "tp1/models/graph/PrimitiveNode.js~PrimitiveNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/graph/PrimitiveNode.js~PrimitiveNode#getId",
    "access": "public",
    "description": "Gets the id of the node",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "id of the node"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "id of the node"
    },
    "params": []
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "getObject",
    "memberof": "tp1/models/graph/PrimitiveNode.js~PrimitiveNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/graph/PrimitiveNode.js~PrimitiveNode#getObject",
    "access": "public",
    "description": "Gets the CGFobject reference",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "CGFobject reference"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "CGFobject reference"
    },
    "params": []
  },
  {
    "__docId__": 185,
    "kind": "file",
    "name": "tp1/models/wrappers/MyLight.js",
    "content": "/**\n * Model that represents a light\n */\nexport class MyLight {\n    /**\n     * @param {string} id - Light id\n     * @param {bool} enabled - Define if the light is enabled or not\n     * @param {vec4} location - Light location\n     * @param {vec3} ambient - Light ambient component\n     * @param {vec3} diffuse - Light diffuse component\n     * @param {vec3} specular - Light specular component\n     * @param {vec3} attenuation - Light attenuation\n     */\n    constructor(id, enabled, location, ambient, diffuse, specular, attenuation){\n        this.id = id;\n        this.enabled = enabled;\n        this.location = location;\n        this.ambient = ambient;\n        this.diffuse = diffuse;\n        this.specular = specular;\n        this.attenuation = attenuation;\n    }\n\n    /**\n     * Gets the id of the light\n     * @returns {string} - Id of the light\n     */\n    getId() {\n        return this.id;\n    }\n\n    /**\n     * Gets the enabled state of the light\n     * @returns {bool} - True if the light is enabled, false otherwise\n     */\n    getEnabled(){\n        return this.enabled;\n    }\n\n    /**\n     * Gets the location of the light\n     * @returns {vec4} - Light location\n     */\n    getLocation(){\n        return this.location;\n    }\n\n    /**\n     * Gets the ambient component of the light\n     * @returns {vec3} - Light ambient component\n     */\n    getAmbient(){\n        return this.ambient;\n    }\n\n    /**\n     * Gets the diffuse component of the light\n     * @returns {vec3} - Light diffuse component\n     */\n    getDiffuse(){\n        return this.diffuse;\n    }\n\n    /**\n     * Gets the specular component of the light\n     * @returns {vec3} - Light specular component\n     */\n    getSpecular(){\n        return this.specular;\n    }\n    \n    /**\n     * Gets the attenuation of the light\n     * @returns {vec3} - Light attenuation\n     */\n    getAttenuation() {\n        this.attenuation;\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/models/wrappers/MyLight.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 186,
    "kind": "class",
    "name": "MyLight",
    "memberof": "tp1/models/wrappers/MyLight.js",
    "static": true,
    "longname": "tp1/models/wrappers/MyLight.js~MyLight",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/models/wrappers/MyLight.js",
    "importStyle": "{MyLight}",
    "description": "Model that represents a light",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 187,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "tp1/models/wrappers/MyLight.js~MyLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MyLight.js~MyLight#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Light id"
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": false,
        "name": "enabled",
        "description": "Define if the light is enabled or not"
      },
      {
        "nullable": null,
        "types": [
          "vec4"
        ],
        "spread": false,
        "optional": false,
        "name": "location",
        "description": "Light location"
      },
      {
        "nullable": null,
        "types": [
          "vec3"
        ],
        "spread": false,
        "optional": false,
        "name": "ambient",
        "description": "Light ambient component"
      },
      {
        "nullable": null,
        "types": [
          "vec3"
        ],
        "spread": false,
        "optional": false,
        "name": "diffuse",
        "description": "Light diffuse component"
      },
      {
        "nullable": null,
        "types": [
          "vec3"
        ],
        "spread": false,
        "optional": false,
        "name": "specular",
        "description": "Light specular component"
      },
      {
        "nullable": null,
        "types": [
          "vec3"
        ],
        "spread": false,
        "optional": false,
        "name": "attenuation",
        "description": "Light attenuation"
      }
    ]
  },
  {
    "__docId__": 188,
    "kind": "member",
    "name": "id",
    "memberof": "tp1/models/wrappers/MyLight.js~MyLight",
    "static": false,
    "longname": "tp1/models/wrappers/MyLight.js~MyLight#id",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "enabled",
    "memberof": "tp1/models/wrappers/MyLight.js~MyLight",
    "static": false,
    "longname": "tp1/models/wrappers/MyLight.js~MyLight#enabled",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "location",
    "memberof": "tp1/models/wrappers/MyLight.js~MyLight",
    "static": false,
    "longname": "tp1/models/wrappers/MyLight.js~MyLight#location",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "member",
    "name": "ambient",
    "memberof": "tp1/models/wrappers/MyLight.js~MyLight",
    "static": false,
    "longname": "tp1/models/wrappers/MyLight.js~MyLight#ambient",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "member",
    "name": "diffuse",
    "memberof": "tp1/models/wrappers/MyLight.js~MyLight",
    "static": false,
    "longname": "tp1/models/wrappers/MyLight.js~MyLight#diffuse",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "member",
    "name": "specular",
    "memberof": "tp1/models/wrappers/MyLight.js~MyLight",
    "static": false,
    "longname": "tp1/models/wrappers/MyLight.js~MyLight#specular",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "member",
    "name": "attenuation",
    "memberof": "tp1/models/wrappers/MyLight.js~MyLight",
    "static": false,
    "longname": "tp1/models/wrappers/MyLight.js~MyLight#attenuation",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "getId",
    "memberof": "tp1/models/wrappers/MyLight.js~MyLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MyLight.js~MyLight#getId",
    "access": "public",
    "description": "Gets the id of the light",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - Id of the light"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Id of the light"
    },
    "params": []
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "getEnabled",
    "memberof": "tp1/models/wrappers/MyLight.js~MyLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MyLight.js~MyLight#getEnabled",
    "access": "public",
    "description": "Gets the enabled state of the light",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{bool} - True if the light is enabled, false otherwise"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "bool"
      ],
      "spread": false,
      "description": "True if the light is enabled, false otherwise"
    },
    "params": []
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "getLocation",
    "memberof": "tp1/models/wrappers/MyLight.js~MyLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MyLight.js~MyLight#getLocation",
    "access": "public",
    "description": "Gets the location of the light",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{vec4} - Light location"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "vec4"
      ],
      "spread": false,
      "description": "Light location"
    },
    "params": []
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "getAmbient",
    "memberof": "tp1/models/wrappers/MyLight.js~MyLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MyLight.js~MyLight#getAmbient",
    "access": "public",
    "description": "Gets the ambient component of the light",
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{vec3} - Light ambient component"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "vec3"
      ],
      "spread": false,
      "description": "Light ambient component"
    },
    "params": []
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "getDiffuse",
    "memberof": "tp1/models/wrappers/MyLight.js~MyLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MyLight.js~MyLight#getDiffuse",
    "access": "public",
    "description": "Gets the diffuse component of the light",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{vec3} - Light diffuse component"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "vec3"
      ],
      "spread": false,
      "description": "Light diffuse component"
    },
    "params": []
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "getSpecular",
    "memberof": "tp1/models/wrappers/MyLight.js~MyLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MyLight.js~MyLight#getSpecular",
    "access": "public",
    "description": "Gets the specular component of the light",
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{vec3} - Light specular component"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "vec3"
      ],
      "spread": false,
      "description": "Light specular component"
    },
    "params": []
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "getAttenuation",
    "memberof": "tp1/models/wrappers/MyLight.js~MyLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MyLight.js~MyLight#getAttenuation",
    "access": "public",
    "description": "Gets the attenuation of the light",
    "lineNumber": 76,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{vec3} - Light attenuation"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "vec3"
      ],
      "spread": false,
      "description": "Light attenuation"
    },
    "params": []
  },
  {
    "__docId__": 202,
    "kind": "file",
    "name": "tp1/models/wrappers/MyMaterial.js",
    "content": "import { CGFappearance } from \"../../../lib/CGF.js\";\n\n/**\n * Model that represents a material\n */\nexport class MyMaterial {\n    /**\n     * @param {string} id - Material id\n     * @param {CGFAppearance} CGFAppearance - CGFappearance object\n     */\n    constructor(id, CGFAppearance){\n        this.id = id;\n        this.CGFAppearance = CGFAppearance;\n    }\n\n    /**\n     * Instantiate a material with the given parameters\n     * @param {string} id - Material id\n     * @param {vec3} ambient - Ambient component\n     * @param {vec3} diffuse - Diffuse component\n     * @param {vec3} specular - Specular component\n     * @param {vec3} emission - Emission component\n     * @param {int} shininess - Shininess of the material\n     * @param {CGFScene} scene - Scene\n     * @returns \n     */\n    static instantiate(id, ambient, diffuse, specular, emission, shininess, scene) {\n        let CGFAppearance = new CGFappearance(scene);\n\n        CGFAppearance.setAmbient(...ambient.getArray());\n        CGFAppearance.setDiffuse(...diffuse.getArray());\n        CGFAppearance.setSpecular(...specular.getArray());\n        CGFAppearance.setEmission(...emission.getArray());\n        CGFAppearance.setShininess(shininess);\n\n        return new MyMaterial(id, CGFAppearance);\n    }\n\n    /**\n     * Gets the id of the material\n     * @returns {string} - Id of the material\n     */\n    getId() {\n        return this.id;\n    }\n\n    /** \n     * Gets the CGFappearance object\n     * @returns {CGFappearance} - CGFappearance object\n    */\n    getCGFAppearance(){\n        return this.CGFAppearance;\n    }\n\n    /**\n     * Gets the emission component of the material\n     * @returns {vec3} - Emission component\n     */\n    getEmission(){\n        return this.CGFAppearance.emission;\n    }\n\n    /**\n     * Gets the ambient component of the material\n     * @returns {vec3} - Ambient component\n     */\n    getAmbient(){\n        return this.CGFAppearance.ambient;\n    }\n\n    /**\n     * Gets the diffuse component of the material\n     * @returns {vec3} - Diffuse component\n     */\n    getDiffuse(){\n        return this.CGFAppearance.diffuse;\n    }\n\n    /**\n     * Gets the specular component of the material\n     * @returns {vec3} - Specular component\n     */\n    getSpecular(){\n        return this.CGFAppearance.specular;\n    }\n\n    /**\n     * Gets the shininess of the material\n     * @returns {int} - Shininess of the material\n     */\n    getShininess(){\n        return this.CGFAppearance.shininess;\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/models/wrappers/MyMaterial.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 203,
    "kind": "class",
    "name": "MyMaterial",
    "memberof": "tp1/models/wrappers/MyMaterial.js",
    "static": true,
    "longname": "tp1/models/wrappers/MyMaterial.js~MyMaterial",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/models/wrappers/MyMaterial.js",
    "importStyle": "{MyMaterial}",
    "description": "Model that represents a material",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 204,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "tp1/models/wrappers/MyMaterial.js~MyMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MyMaterial.js~MyMaterial#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Material id"
      },
      {
        "nullable": null,
        "types": [
          "CGFAppearance"
        ],
        "spread": false,
        "optional": false,
        "name": "CGFAppearance",
        "description": "CGFappearance object"
      }
    ]
  },
  {
    "__docId__": 205,
    "kind": "member",
    "name": "id",
    "memberof": "tp1/models/wrappers/MyMaterial.js~MyMaterial",
    "static": false,
    "longname": "tp1/models/wrappers/MyMaterial.js~MyMaterial#id",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "member",
    "name": "CGFAppearance",
    "memberof": "tp1/models/wrappers/MyMaterial.js~MyMaterial",
    "static": false,
    "longname": "tp1/models/wrappers/MyMaterial.js~MyMaterial#CGFAppearance",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "instantiate",
    "memberof": "tp1/models/wrappers/MyMaterial.js~MyMaterial",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/models/wrappers/MyMaterial.js~MyMaterial.instantiate",
    "access": "public",
    "description": "Instantiate a material with the given parameters",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Material id"
      },
      {
        "nullable": null,
        "types": [
          "vec3"
        ],
        "spread": false,
        "optional": false,
        "name": "ambient",
        "description": "Ambient component"
      },
      {
        "nullable": null,
        "types": [
          "vec3"
        ],
        "spread": false,
        "optional": false,
        "name": "diffuse",
        "description": "Diffuse component"
      },
      {
        "nullable": null,
        "types": [
          "vec3"
        ],
        "spread": false,
        "optional": false,
        "name": "specular",
        "description": "Specular component"
      },
      {
        "nullable": null,
        "types": [
          "vec3"
        ],
        "spread": false,
        "optional": false,
        "name": "emission",
        "description": "Emission component"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "shininess",
        "description": "Shininess of the material"
      },
      {
        "nullable": null,
        "types": [
          "CGFScene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "Scene"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "getId",
    "memberof": "tp1/models/wrappers/MyMaterial.js~MyMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MyMaterial.js~MyMaterial#getId",
    "access": "public",
    "description": "Gets the id of the material",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - Id of the material"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Id of the material"
    },
    "params": []
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "getCGFAppearance",
    "memberof": "tp1/models/wrappers/MyMaterial.js~MyMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MyMaterial.js~MyMaterial#getCGFAppearance",
    "access": "public",
    "description": "Gets the CGFappearance object",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{CGFappearance} - CGFappearance object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CGFappearance"
      ],
      "spread": false,
      "description": "CGFappearance object"
    },
    "params": []
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "getEmission",
    "memberof": "tp1/models/wrappers/MyMaterial.js~MyMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MyMaterial.js~MyMaterial#getEmission",
    "access": "public",
    "description": "Gets the emission component of the material",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{vec3} - Emission component"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "vec3"
      ],
      "spread": false,
      "description": "Emission component"
    },
    "params": []
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "getAmbient",
    "memberof": "tp1/models/wrappers/MyMaterial.js~MyMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MyMaterial.js~MyMaterial#getAmbient",
    "access": "public",
    "description": "Gets the ambient component of the material",
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{vec3} - Ambient component"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "vec3"
      ],
      "spread": false,
      "description": "Ambient component"
    },
    "params": []
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "getDiffuse",
    "memberof": "tp1/models/wrappers/MyMaterial.js~MyMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MyMaterial.js~MyMaterial#getDiffuse",
    "access": "public",
    "description": "Gets the diffuse component of the material",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{vec3} - Diffuse component"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "vec3"
      ],
      "spread": false,
      "description": "Diffuse component"
    },
    "params": []
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "getSpecular",
    "memberof": "tp1/models/wrappers/MyMaterial.js~MyMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MyMaterial.js~MyMaterial#getSpecular",
    "access": "public",
    "description": "Gets the specular component of the material",
    "lineNumber": 83,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{vec3} - Specular component"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "vec3"
      ],
      "spread": false,
      "description": "Specular component"
    },
    "params": []
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "getShininess",
    "memberof": "tp1/models/wrappers/MyMaterial.js~MyMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MyMaterial.js~MyMaterial#getShininess",
    "access": "public",
    "description": "Gets the shininess of the material",
    "lineNumber": 91,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{int} - Shininess of the material"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "int"
      ],
      "spread": false,
      "description": "Shininess of the material"
    },
    "params": []
  },
  {
    "__docId__": 215,
    "kind": "file",
    "name": "tp1/models/wrappers/MySpotLight.js",
    "content": "/**\n * Model representing a spot light\n */\nexport class MySpotLights extends MyLight {\n    /**\n     * @param {string} id - Light id\n     * @param {bool} enabled - Define if the light is enabled or not\n     * @param {vec4} location - Light location\n     * @param {vec3} ambient - Light ambient component\n     * @param {vec3} diffuse - Light diffuse component\n     * @param {vec3} specular - Light specular component\n     * @param {vec3} attenuation - Light attenuation\n     * @param {float} angle - Light angle\n     * @param {float} exponent - Light exponent\n     * @param {vec3} target - Light target\n     */\n    constructor(id, enabled, location, ambient, diffuse, specular, attenuation, angle, exponent, target) {\n        super(id, enabled, location, ambient, diffuse, specular, attenuation);\n        this.angle = angle;\n        this.exponent = exponent;\n        this.target = target;\n    }\n\n    /**\n     * Gets the angle of the light\n     * @returns {float} - Light angle\n     */\n    getAngle() {\n        return this.angle;\n    }\n\n    /**\n     * Gets the light exponent\n     * @returns {float} - Light exponent\n     */\n    getExponent() {\n        return this.exponent;\n    }\n\n    /**\n     * Gets the light target\n     * @returns {vec3} - Light target\n     */\n    getTarget() {\n        return this.target;\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/models/wrappers/MySpotLight.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 216,
    "kind": "class",
    "name": "MySpotLights",
    "memberof": "tp1/models/wrappers/MySpotLight.js",
    "static": true,
    "longname": "tp1/models/wrappers/MySpotLight.js~MySpotLights",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/models/wrappers/MySpotLight.js",
    "importStyle": "{MySpotLights}",
    "description": "Model representing a spot light",
    "lineNumber": 4,
    "interface": false,
    "extends": [
      "MyLight"
    ]
  },
  {
    "__docId__": 217,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "tp1/models/wrappers/MySpotLight.js~MySpotLights",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MySpotLight.js~MySpotLights#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Light id"
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": false,
        "name": "enabled",
        "description": "Define if the light is enabled or not"
      },
      {
        "nullable": null,
        "types": [
          "vec4"
        ],
        "spread": false,
        "optional": false,
        "name": "location",
        "description": "Light location"
      },
      {
        "nullable": null,
        "types": [
          "vec3"
        ],
        "spread": false,
        "optional": false,
        "name": "ambient",
        "description": "Light ambient component"
      },
      {
        "nullable": null,
        "types": [
          "vec3"
        ],
        "spread": false,
        "optional": false,
        "name": "diffuse",
        "description": "Light diffuse component"
      },
      {
        "nullable": null,
        "types": [
          "vec3"
        ],
        "spread": false,
        "optional": false,
        "name": "specular",
        "description": "Light specular component"
      },
      {
        "nullable": null,
        "types": [
          "vec3"
        ],
        "spread": false,
        "optional": false,
        "name": "attenuation",
        "description": "Light attenuation"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "Light angle"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "exponent",
        "description": "Light exponent"
      },
      {
        "nullable": null,
        "types": [
          "vec3"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "Light target"
      }
    ]
  },
  {
    "__docId__": 218,
    "kind": "member",
    "name": "angle",
    "memberof": "tp1/models/wrappers/MySpotLight.js~MySpotLights",
    "static": false,
    "longname": "tp1/models/wrappers/MySpotLight.js~MySpotLights#angle",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "member",
    "name": "exponent",
    "memberof": "tp1/models/wrappers/MySpotLight.js~MySpotLights",
    "static": false,
    "longname": "tp1/models/wrappers/MySpotLight.js~MySpotLights#exponent",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "member",
    "name": "target",
    "memberof": "tp1/models/wrappers/MySpotLight.js~MySpotLights",
    "static": false,
    "longname": "tp1/models/wrappers/MySpotLight.js~MySpotLights#target",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "getAngle",
    "memberof": "tp1/models/wrappers/MySpotLight.js~MySpotLights",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MySpotLight.js~MySpotLights#getAngle",
    "access": "public",
    "description": "Gets the angle of the light",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{float} - Light angle"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "float"
      ],
      "spread": false,
      "description": "Light angle"
    },
    "params": []
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "getExponent",
    "memberof": "tp1/models/wrappers/MySpotLight.js~MySpotLights",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MySpotLight.js~MySpotLights#getExponent",
    "access": "public",
    "description": "Gets the light exponent",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{float} - Light exponent"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "float"
      ],
      "spread": false,
      "description": "Light exponent"
    },
    "params": []
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "getTarget",
    "memberof": "tp1/models/wrappers/MySpotLight.js~MySpotLights",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MySpotLight.js~MySpotLights#getTarget",
    "access": "public",
    "description": "Gets the light target",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{vec3} - Light target"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "vec3"
      ],
      "spread": false,
      "description": "Light target"
    },
    "params": []
  },
  {
    "__docId__": 224,
    "kind": "file",
    "name": "tp1/models/wrappers/MyTexture.js",
    "content": "import { CGFtexture } from \"../../../lib/CGF.js\";\n\n/**\n * Model that represents a texture\n */\nexport class MyTexture {\n    /**\n     * @param {string} id - Id of the texture\n     * @param {CGFtexture} CGFTexture - Reference to the CGFtexture\n     * @param {number} length_s - Horizontal texture scale factor\n     * @param {number} length_t - Vertical texture scale factor\n     */\n    constructor(id, CGFTexture, length_s, length_t) {\n        this.id = id;\n        this.CGFTexture = CGFTexture;\n        this.length_s = length_s;\n        this.length_t = length_t\n    }\n\n    /**\n     * Instantiates a MyTexture class with the given parameters\n     * @param {*} id - Id of the texture\n     * @param {number} length_s - Horizontal texture scale factor\n     * @param {number} length_t - Vertical texture scale factor\n     * @param {CGFscene} scene - Reference to the CGFscene\n     * @param {string} fileURL - Texture file URL\n     * @returns \n     */\n    static instantiate(id, length_s, length_t, scene, fileURL) {\n        let CGFTexture = new CGFtexture(scene, fileURL)\n        return new MyTexture(id, CGFTexture, length_s, length_t);\n    }\n\n    /**\n     * Gets the id of the texture\n     * @returns Id of the texture\n     */\n    getId() {\n        return this.id;\n    }\n\n    /**\n     * Gets the reference to the CGFtexture\n     * @returns Reference to the CGFtexture\n     */\n    getCGFTexture() {\n        return this.CGFTexture;\n    }\n\n    /**\n     * Gets the horizontal texture scale factor\n     * @returns Horizontal texture scale factor\n     */\n    getLength_s() {\n        return this.length_s;\n    }\n\n    /**\n     * Gets the vertical texture scale factor\n     * @returns Vertical texture scale factor\n     */\n    getLength_t() {\n        return this.length_t;\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/models/wrappers/MyTexture.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 225,
    "kind": "class",
    "name": "MyTexture",
    "memberof": "tp1/models/wrappers/MyTexture.js",
    "static": true,
    "longname": "tp1/models/wrappers/MyTexture.js~MyTexture",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/models/wrappers/MyTexture.js",
    "importStyle": "{MyTexture}",
    "description": "Model that represents a texture",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 226,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "tp1/models/wrappers/MyTexture.js~MyTexture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MyTexture.js~MyTexture#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Id of the texture"
      },
      {
        "nullable": null,
        "types": [
          "CGFtexture"
        ],
        "spread": false,
        "optional": false,
        "name": "CGFTexture",
        "description": "Reference to the CGFtexture"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "length_s",
        "description": "Horizontal texture scale factor"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "length_t",
        "description": "Vertical texture scale factor"
      }
    ]
  },
  {
    "__docId__": 227,
    "kind": "member",
    "name": "id",
    "memberof": "tp1/models/wrappers/MyTexture.js~MyTexture",
    "static": false,
    "longname": "tp1/models/wrappers/MyTexture.js~MyTexture#id",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 228,
    "kind": "member",
    "name": "CGFTexture",
    "memberof": "tp1/models/wrappers/MyTexture.js~MyTexture",
    "static": false,
    "longname": "tp1/models/wrappers/MyTexture.js~MyTexture#CGFTexture",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "member",
    "name": "length_s",
    "memberof": "tp1/models/wrappers/MyTexture.js~MyTexture",
    "static": false,
    "longname": "tp1/models/wrappers/MyTexture.js~MyTexture#length_s",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "member",
    "name": "length_t",
    "memberof": "tp1/models/wrappers/MyTexture.js~MyTexture",
    "static": false,
    "longname": "tp1/models/wrappers/MyTexture.js~MyTexture#length_t",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "instantiate",
    "memberof": "tp1/models/wrappers/MyTexture.js~MyTexture",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/models/wrappers/MyTexture.js~MyTexture.instantiate",
    "access": "public",
    "description": "Instantiates a MyTexture class with the given parameters",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Id of the texture"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "length_s",
        "description": "Horizontal texture scale factor"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "length_t",
        "description": "Vertical texture scale factor"
      },
      {
        "nullable": null,
        "types": [
          "CGFscene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "Reference to the CGFscene"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fileURL",
        "description": "Texture file URL"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "getId",
    "memberof": "tp1/models/wrappers/MyTexture.js~MyTexture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MyTexture.js~MyTexture#getId",
    "access": "public",
    "description": "Gets the id of the texture",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Id of the texture"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Id of the texture"
    },
    "params": []
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "getCGFTexture",
    "memberof": "tp1/models/wrappers/MyTexture.js~MyTexture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MyTexture.js~MyTexture#getCGFTexture",
    "access": "public",
    "description": "Gets the reference to the CGFtexture",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Reference to the CGFtexture"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Reference to the CGFtexture"
    },
    "params": []
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "getLength_s",
    "memberof": "tp1/models/wrappers/MyTexture.js~MyTexture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MyTexture.js~MyTexture#getLength_s",
    "access": "public",
    "description": "Gets the horizontal texture scale factor",
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Horizontal texture scale factor"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Horizontal texture scale factor"
    },
    "params": []
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "getLength_t",
    "memberof": "tp1/models/wrappers/MyTexture.js~MyTexture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MyTexture.js~MyTexture#getLength_t",
    "access": "public",
    "description": "Gets the vertical texture scale factor",
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Vertical texture scale factor"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Vertical texture scale factor"
    },
    "params": []
  },
  {
    "__docId__": 236,
    "kind": "file",
    "name": "tp1/models/wrappers/MyTransformation.js",
    "content": "/**\n * Model that represents a transformation\n */\nexport class MyTransformation {\n    /**\n     * @param {string} id - Id of the transformation\n     * @param {mat4} mat - Matrix that represents the transformation\n     */\n    constructor(id, mat=mat4.create()) {\n        this.id = id;\n        this.mat = mat;\n    }\n\n    /**\n     * Gets the id of the transformation\n     * @returns Id of the transformation\n     */\n    getId() {\n        return this.id;\n    }\n\n    /**\n     * Gets the matrix of the transformation\n     * @returns Matrix of the transformation\n     */\n    getMat() {\n        return this.mat;\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/models/wrappers/MyTransformation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 237,
    "kind": "class",
    "name": "MyTransformation",
    "memberof": "tp1/models/wrappers/MyTransformation.js",
    "static": true,
    "longname": "tp1/models/wrappers/MyTransformation.js~MyTransformation",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/models/wrappers/MyTransformation.js",
    "importStyle": "{MyTransformation}",
    "description": "Model that represents a transformation",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 238,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "tp1/models/wrappers/MyTransformation.js~MyTransformation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MyTransformation.js~MyTransformation#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Id of the transformation"
      },
      {
        "nullable": null,
        "types": [
          "mat4"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "Matrix that represents the transformation"
      }
    ]
  },
  {
    "__docId__": 239,
    "kind": "member",
    "name": "id",
    "memberof": "tp1/models/wrappers/MyTransformation.js~MyTransformation",
    "static": false,
    "longname": "tp1/models/wrappers/MyTransformation.js~MyTransformation#id",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "member",
    "name": "mat",
    "memberof": "tp1/models/wrappers/MyTransformation.js~MyTransformation",
    "static": false,
    "longname": "tp1/models/wrappers/MyTransformation.js~MyTransformation#mat",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "getId",
    "memberof": "tp1/models/wrappers/MyTransformation.js~MyTransformation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MyTransformation.js~MyTransformation#getId",
    "access": "public",
    "description": "Gets the id of the transformation",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Id of the transformation"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Id of the transformation"
    },
    "params": []
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "getMat",
    "memberof": "tp1/models/wrappers/MyTransformation.js~MyTransformation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MyTransformation.js~MyTransformation#getMat",
    "access": "public",
    "description": "Gets the matrix of the transformation",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Matrix of the transformation"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Matrix of the transformation"
    },
    "params": []
  },
  {
    "__docId__": 243,
    "kind": "file",
    "name": "tp1/models/wrappers/MyView.js",
    "content": "import { CGFcamera, CGFcameraOrtho } from \"../../../lib/CGF.js\";\n\n/**\n * Model that represents a camera view\n */\nexport class MyView {\n    /**\n     * @param {string} id - Id of the view\n     * @param {CGFcamera} CGFCamera - Reference to the CGFcamera\n     */\n    constructor(id, CGFCamera){\n        this.id = id;\n        this.CGFCamera = CGFCamera;\n    }\n\n    /**\n     * Instantiates a perspective MyView class with the given parameters\n     * @param {string} id - Id of the view\n     * @param {number} angleRad - Field of view angle of the camera (in radians)\n     * @param {number} near - Near clipping plane distance\n     * @param {number} far - Far clipping plane distance\n     * @param {vec3} position - Position of the camera\n     * @param {vec3} target - Target of the camera\n     * @returns Instantiated MyView class\n     */\n    static instantiate(id, angleRad, near, far, position, target) {\n        let CGFCamera = new CGFcamera(angleRad, near, far, position, target);\n        return new MyView(id, CGFCamera);\n    }\n\n    /**\n     * Instantiates an orthogonal MyView class with the given parameters\n     * @param {string} id - Id of the view\n     * @param {number} left - Left bound of the frustum\n     * @param {number} right - Right bound of the frustum\n     * @param {number} bottom - Bottom bound of the frustum\n     * @param {number} top - Top bound of the frustum\n     * @param {number} near - Near clipping plane distance\n     * @param {number} far - Far clipping plane distance\n     * @param {vec3} position - Position of the camera\n     * @param {vec3} target - Target of the camera\n     * @param {vec3} up - Up vector\n     * @returns \n     */\n    static instantiateOrtho(id, left, right, bottom, top, near, far, position, target, up=vec3.fromValues(0,1,0)) {\n        let CGFCameraOrtho = new CGFcameraOrtho(left, right, bottom, top, near, far, position, target, up);\n        return new MyView(id, CGFCameraOrtho);\n    }\n\n    /**\n     * Gets the id of the view\n     * @returns Id of the view\n     */\n    getId() {\n        return this.id;\n    }\n\n    /**\n     * Gets the CGFcamera reference\n     * @returns CGFcamera reference\n     */\n    getCGFCamera() {\n        return this.CGFCamera;\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/models/wrappers/MyView.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 244,
    "kind": "class",
    "name": "MyView",
    "memberof": "tp1/models/wrappers/MyView.js",
    "static": true,
    "longname": "tp1/models/wrappers/MyView.js~MyView",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/models/wrappers/MyView.js",
    "importStyle": "{MyView}",
    "description": "Model that represents a camera view",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 245,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "tp1/models/wrappers/MyView.js~MyView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MyView.js~MyView#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Id of the view"
      },
      {
        "nullable": null,
        "types": [
          "CGFcamera"
        ],
        "spread": false,
        "optional": false,
        "name": "CGFCamera",
        "description": "Reference to the CGFcamera"
      }
    ]
  },
  {
    "__docId__": 246,
    "kind": "member",
    "name": "id",
    "memberof": "tp1/models/wrappers/MyView.js~MyView",
    "static": false,
    "longname": "tp1/models/wrappers/MyView.js~MyView#id",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "member",
    "name": "CGFCamera",
    "memberof": "tp1/models/wrappers/MyView.js~MyView",
    "static": false,
    "longname": "tp1/models/wrappers/MyView.js~MyView#CGFCamera",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "instantiate",
    "memberof": "tp1/models/wrappers/MyView.js~MyView",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/models/wrappers/MyView.js~MyView.instantiate",
    "access": "public",
    "description": "Instantiates a perspective MyView class with the given parameters",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Instantiated MyView class"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Id of the view"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "angleRad",
        "description": "Field of view angle of the camera (in radians)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "near",
        "description": "Near clipping plane distance"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "far",
        "description": "Far clipping plane distance"
      },
      {
        "nullable": null,
        "types": [
          "vec3"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "Position of the camera"
      },
      {
        "nullable": null,
        "types": [
          "vec3"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "Target of the camera"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Instantiated MyView class"
    }
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "instantiateOrtho",
    "memberof": "tp1/models/wrappers/MyView.js~MyView",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/models/wrappers/MyView.js~MyView.instantiateOrtho",
    "access": "public",
    "description": "Instantiates an orthogonal MyView class with the given parameters",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Id of the view"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "left",
        "description": "Left bound of the frustum"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "right",
        "description": "Right bound of the frustum"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bottom",
        "description": "Bottom bound of the frustum"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "top",
        "description": "Top bound of the frustum"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "near",
        "description": "Near clipping plane distance"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "far",
        "description": "Far clipping plane distance"
      },
      {
        "nullable": null,
        "types": [
          "vec3"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "Position of the camera"
      },
      {
        "nullable": null,
        "types": [
          "vec3"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "Target of the camera"
      },
      {
        "nullable": null,
        "types": [
          "vec3"
        ],
        "spread": false,
        "optional": false,
        "name": "up",
        "description": "Up vector"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "getId",
    "memberof": "tp1/models/wrappers/MyView.js~MyView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MyView.js~MyView#getId",
    "access": "public",
    "description": "Gets the id of the view",
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Id of the view"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Id of the view"
    },
    "params": []
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "getCGFCamera",
    "memberof": "tp1/models/wrappers/MyView.js~MyView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/models/wrappers/MyView.js~MyView#getCGFCamera",
    "access": "public",
    "description": "Gets the CGFcamera reference",
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "CGFcamera reference"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "CGFcamera reference"
    },
    "params": []
  },
  {
    "__docId__": 252,
    "kind": "file",
    "name": "tp1/parser/AmbientParser.js",
    "content": "import {ColorParser} from \"./ColorParser.js\";\nimport {ParserResult} from \"./ParserResult.js\";\nimport {Color} from \"../models/Color.js\";\n\n/**\n * Parser for the <ambient> node\n */\nexport class AmbientParser {\n    /**\n     * Parse the <ambient> node\n     * @param {ambient element} node - Node that should be parsed\n     * @param {CGFXMLreader} reader - XMLreader\n     * @returns {ParserResult} - Containing a object with the parsed ambient and background colors, and errors that occurred while parsing\n     */\n    static parse(node, reader) {\n        let ambient = [];\n        let background = [];\n        let errors = [];\n        let nodeNames = [];\n        for(const child of node.children) {\n            nodeNames.push(child.nodeName);\n        }\n\n        const ambientIndex = nodeNames.indexOf(\"ambient\");\n        const backgroundIndex = nodeNames.indexOf(\"background\");\n        let results = [];\n        if(ambientIndex != -1) {\n            var ambientColorResult = ColorParser.parse(node.children[ambientIndex], reader);\n            ambient = ambientColorResult.getValue();\n            results.push(ambientColorResult);\n        } else {\n            ambient = new Color([0,0,0,0]);\n            errors.push(\"missing <ambient> tag\")\n        }\n\n        if(backgroundIndex != -1) {\n            var backgroundColorResult = ColorParser.parse(node.children[backgroundIndex], reader);\n            background = backgroundColorResult.getValue();\n            results.push(backgroundColorResult);\n        } else {\n            background = new Color([0,0,0,0]);\n            errors.push(\"missing <background> tag\");\n        }\n\n\n        return ParserResult.collect(\n                {\"ambient\": ambient.getArray(), \"background\": background.getArray()},\n                results,\n                \"parsing <ambient>\",\n                errors);\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/parser/AmbientParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 253,
    "kind": "class",
    "name": "AmbientParser",
    "memberof": "tp1/parser/AmbientParser.js",
    "static": true,
    "longname": "tp1/parser/AmbientParser.js~AmbientParser",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/parser/AmbientParser.js",
    "importStyle": "{AmbientParser}",
    "description": "Parser for the <ambient> node",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "parse",
    "memberof": "tp1/parser/AmbientParser.js~AmbientParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/AmbientParser.js~AmbientParser.parse",
    "access": "public",
    "description": "Parse the <ambient> node",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ParserResult} - Containing a object with the parsed ambient and background colors, and errors that occurred while parsing"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ambient element"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Node that should be parsed"
      },
      {
        "nullable": null,
        "types": [
          "CGFXMLreader"
        ],
        "spread": false,
        "optional": false,
        "name": "reader",
        "description": "XMLreader"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ParserResult"
      ],
      "spread": false,
      "description": "Containing a object with the parsed ambient and background colors, and errors that occurred while parsing"
    }
  },
  {
    "__docId__": 255,
    "kind": "file",
    "name": "tp1/parser/BlockParser.js",
    "content": "import { ParserResult } from \"./ParserResult.js\";\n\n/**\n * Parser for nested elements within a block\n */\nexport class BlockParser {\n    /**\n     * Pass a tag block (<material> for example, receiving a map that matches each subtag to an handler function\n     * Example: \n     * <material>\n     *      <subtag1/> \n     *      <subtag2/>\n     * </material>\n     * \n     * tagHandlerMap\n     * {\n     *   \"subtag1\": [func, [0, 0, 0, 1]], where func is a function that receives the <subtag1/> node \n     *                                  and the second element the default value to be used in case of error\n     *   \"subtag2\": [func, [0, 0, 0, 1]],\n     * }\n     * \n     * @param {block element} node - Root node of the block that should be parsed\n     * @param {dict} tagHandlerMap\n     * @returns {ParserResult} - Containing the parsed block and errors that occurred while parsing\n     */\n    static parse(node, tagHandlerMap){\n        let children = node.children;\n\n        let result = {};\n        let errors = [];\n\n        for(const child of children){\n            let name = child.nodeName;\n            if(tagHandlerMap.has(name)){\n                if(result[name] != null){\n                    errors.push(\"Duplicate tag <\" + name + \"/>\");\n                } else {\n                    const parseResult = tagHandlerMap.get(name)[0](child);\n                    errors = errors.concat(parseResult.getErrors());\n                    result[name] = parseResult.getValueOrDefault(tagHandlerMap.get(name)[1]);\n                }\n            } else {\n                errors.push(\"Unexpected tag <\" + name + \"/>\");\n            }\n        }\n\n        for(const tag of tagHandlerMap.keys()){\n            if(result[tag] == null){\n                errors.push(\"Expected tag <\" + tag + \"/>\");\n                result[tag] = tagHandlerMap.get(tag)[1];\n            }\n        }\n        \n        return new ParserResult(result, errors);\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/parser/BlockParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 256,
    "kind": "class",
    "name": "BlockParser",
    "memberof": "tp1/parser/BlockParser.js",
    "static": true,
    "longname": "tp1/parser/BlockParser.js~BlockParser",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/parser/BlockParser.js",
    "importStyle": "{BlockParser}",
    "description": "Parser for nested elements within a block",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "parse",
    "memberof": "tp1/parser/BlockParser.js~BlockParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/BlockParser.js~BlockParser.parse",
    "access": "public",
    "description": "Pass a tag block (<material> for example, receiving a map that matches each subtag to an handler function\nExample: \n<material>\n     <subtag1/> \n     <subtag2/>\n</material>\n\ntagHandlerMap\n{\n  \"subtag1\": [func, [0, 0, 0, 1]], where func is a function that receives the <subtag1/> node \n                                 and the second element the default value to be used in case of error\n  \"subtag2\": [func, [0, 0, 0, 1]],\n}",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ParserResult} - Containing the parsed block and errors that occurred while parsing"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "block element"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Root node of the block that should be parsed"
      },
      {
        "nullable": null,
        "types": [
          "dict"
        ],
        "spread": false,
        "optional": false,
        "name": "tagHandlerMap",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ParserResult"
      ],
      "spread": false,
      "description": "Containing the parsed block and errors that occurred while parsing"
    }
  },
  {
    "__docId__": 258,
    "kind": "file",
    "name": "tp1/parser/ColorParser.js",
    "content": "import { FloatParser } from \"./FloatParser.js\";\nimport { ParserResult } from \"./ParserResult.js\";\nimport { Color } from \"../models/Color.js\";\n\n/**\n * Parser for the node with color attributes\n */\nexport class ColorParser {\n    /**\n     * Parse the node with color attributes\n     * @param {element} node - Node that should be parsed\n     * @param {CGFXMLreader} reader - XMLreader\n     * @returns {ParserResult} - Containing a Color object with the parsed color, and errors that occurred while parsing\n     */\n    static parse(node, reader) {\n        let r = FloatParser.parse(node, reader, 'r', 0, 1);\n        let g = FloatParser.parse(node, reader, 'g', 0, 1);\n        let b = FloatParser.parse(node, reader, 'b', 0, 1);\n        let a = FloatParser.parse(node, reader, 'a', 0, 1);\n        \n        return ParserResult.collect(\n            new Color(r.getValueOrDefault(0), g.getValueOrDefault(0), b.getValueOrDefault(0), a.getValueOrDefault(1)),\n            [r, g, b, a],\n            \"parsing rgba color\"\n        );\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/parser/ColorParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 259,
    "kind": "class",
    "name": "ColorParser",
    "memberof": "tp1/parser/ColorParser.js",
    "static": true,
    "longname": "tp1/parser/ColorParser.js~ColorParser",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/parser/ColorParser.js",
    "importStyle": "{ColorParser}",
    "description": "Parser for the node with color attributes",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "parse",
    "memberof": "tp1/parser/ColorParser.js~ColorParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/ColorParser.js~ColorParser.parse",
    "access": "public",
    "description": "Parse the node with color attributes",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ParserResult} - Containing a Color object with the parsed color, and errors that occurred while parsing"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "element"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Node that should be parsed"
      },
      {
        "nullable": null,
        "types": [
          "CGFXMLreader"
        ],
        "spread": false,
        "optional": false,
        "name": "reader",
        "description": "XMLreader"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ParserResult"
      ],
      "spread": false,
      "description": "Containing a Color object with the parsed color, and errors that occurred while parsing"
    }
  },
  {
    "__docId__": 261,
    "kind": "file",
    "name": "tp1/parser/Coordinate3DParser.js",
    "content": "import { ParserResult } from \"./ParserResult.js\";\nimport { FloatParser } from \"./FloatParser.js\";\nimport { Coordinate3D } from \"../models/Coordinate3D.js\";\n\n/**\n * Parser for a node with 3d coordinates\n */\nexport class Coordinate3DParser {\n    /**\n     * Parse a node with 3d coordinates\n     * @param {element} node - Node that should be parsed\n     * @param {CGFXMLreader} reader - XMLreader\n     * @returns {ParserResult} - Containing a Coordinate3D object with the parsed coordinates, and errors that occurred while parsing\n     */\n    static parse(node, reader) {\n        let x = FloatParser.parse(node, reader, \"x\");\n        let y = FloatParser.parse(node, reader, \"y\");\n        let z = FloatParser.parse(node, reader, \"z\");\n\n        return ParserResult.collect(\n            new Coordinate3D(x.getValueOrDefault(0), y.getValueOrDefault(0), z.getValueOrDefault(0)),\n            [x, y, z],\n            \"parsing xyz coordinates\"\n        );\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/parser/Coordinate3DParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 262,
    "kind": "class",
    "name": "Coordinate3DParser",
    "memberof": "tp1/parser/Coordinate3DParser.js",
    "static": true,
    "longname": "tp1/parser/Coordinate3DParser.js~Coordinate3DParser",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/parser/Coordinate3DParser.js",
    "importStyle": "{Coordinate3DParser}",
    "description": "Parser for a node with 3d coordinates",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "parse",
    "memberof": "tp1/parser/Coordinate3DParser.js~Coordinate3DParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/Coordinate3DParser.js~Coordinate3DParser.parse",
    "access": "public",
    "description": "Parse a node with 3d coordinates",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ParserResult} - Containing a Coordinate3D object with the parsed coordinates, and errors that occurred while parsing"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "element"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Node that should be parsed"
      },
      {
        "nullable": null,
        "types": [
          "CGFXMLreader"
        ],
        "spread": false,
        "optional": false,
        "name": "reader",
        "description": "XMLreader"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ParserResult"
      ],
      "spread": false,
      "description": "Containing a Coordinate3D object with the parsed coordinates, and errors that occurred while parsing"
    }
  },
  {
    "__docId__": 264,
    "kind": "file",
    "name": "tp1/parser/FloatParser.js",
    "content": "import { ParserResult } from \"./ParserResult.js\";\n\n/**\n * Parser for a float attribute from a node\n */\nexport class FloatParser {\n    /**\n     * Parse a float attribute from a node\n     * @param {element} node - Node that should be parsed\n     * @param {CGFXMLreader} reader - XMLreader\n     * @param {string} attributeName - Name of the attribute that should be parsed\n     * @param {float} minLimit - Minimum value of the attribute\n     * @param {float} maxLimit - Maximum value of the attribute\n     * @returns {ParserResult} - Containing a float with the parsed attribute, and errors that occurred while parsing\n     */\n    static parse(node, reader, attributeName, minLimit=Number.NEGATIVE_INFINITY, maxLimit=Number.POSITIVE_INFINITY) {\n        let value = reader.getFloat(node, attributeName);\n        if(!(value != null && !isNaN(value) && value >= minLimit && value <= maxLimit))\n            return ParserResult.fromError(\"unable to parse \" + attributeName);\n        return ParserResult.fromValue(value);\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/parser/FloatParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 265,
    "kind": "class",
    "name": "FloatParser",
    "memberof": "tp1/parser/FloatParser.js",
    "static": true,
    "longname": "tp1/parser/FloatParser.js~FloatParser",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/parser/FloatParser.js",
    "importStyle": "{FloatParser}",
    "description": "Parser for a float attribute from a node",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "parse",
    "memberof": "tp1/parser/FloatParser.js~FloatParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/FloatParser.js~FloatParser.parse",
    "access": "public",
    "description": "Parse a float attribute from a node",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ParserResult} - Containing a float with the parsed attribute, and errors that occurred while parsing"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "element"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Node that should be parsed"
      },
      {
        "nullable": null,
        "types": [
          "CGFXMLreader"
        ],
        "spread": false,
        "optional": false,
        "name": "reader",
        "description": "XMLreader"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "attributeName",
        "description": "Name of the attribute that should be parsed"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "minLimit",
        "description": "Minimum value of the attribute"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "maxLimit",
        "description": "Maximum value of the attribute"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ParserResult"
      ],
      "spread": false,
      "description": "Containing a float with the parsed attribute, and errors that occurred while parsing"
    }
  },
  {
    "__docId__": 267,
    "kind": "file",
    "name": "tp1/parser/GenericChildParser.js",
    "content": "import {ParserResult} from \"./ParserResult.js\";\n\n/**\n * Parser for block level elements with common substructure\n * Applied to <materials>, <textures>, <transformations>, etc... that contain sub elements <material>, <texture>, etc...\n */\nexport class GenericChildParser {\n    /**\n     * Parse a block element node\n     * @param {element} node - Node that should be parsed\n     * @param {CGFXMLreader} reader - XMLreader\n     * @param arg - Argument that should be passed to the parse function of the child parser\n     * @param parserClass - Parser class that should be used to parse child nodes\n     * @param {string} typeName - Type of the child nodes for context and error messages\n     * @returns {ParserResult} - Containing an dict with id:parsedChildNode structure, and errors that occurred while parsing\n     */\n    static parse(node, reader, arg, parserClass, typeName=\"\") {\n        let output = {};\n        let results = [];\n        let errors = [];\n\n        for(let child of node.children){\n            const result = parserClass.parse(child, reader, arg);\n            const v = result.getValue();\n            results.push(result);\n\n            if(output[v.getId()] == null){\n                output[v.getId()] = v;\n            } else {\n                errors.push(typeName + \" with id=\" + v.getId() + \" already exists\");\n            }\n        }\n\n        return ParserResult.collect(output, results, \"parsing <\" + typeName + \"s>\", errors);\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/parser/GenericChildParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 268,
    "kind": "class",
    "name": "GenericChildParser",
    "memberof": "tp1/parser/GenericChildParser.js",
    "static": true,
    "longname": "tp1/parser/GenericChildParser.js~GenericChildParser",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/parser/GenericChildParser.js",
    "importStyle": "{GenericChildParser}",
    "description": "Parser for block level elements with common substructure\nApplied to <materials>, <textures>, <transformations>, etc... that contain sub elements <material>, <texture>, etc...",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "parse",
    "memberof": "tp1/parser/GenericChildParser.js~GenericChildParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/GenericChildParser.js~GenericChildParser.parse",
    "access": "public",
    "description": "Parse a block element node",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ParserResult} - Containing an dict with id:parsedChildNode structure, and errors that occurred while parsing"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "element"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Node that should be parsed"
      },
      {
        "nullable": null,
        "types": [
          "CGFXMLreader"
        ],
        "spread": false,
        "optional": false,
        "name": "reader",
        "description": "XMLreader"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "Argument that should be passed to the parse function of the child parser"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "parserClass",
        "description": "Parser class that should be used to parse child nodes"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "typeName",
        "description": "Type of the child nodes for context and error messages"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ParserResult"
      ],
      "spread": false,
      "description": "Containing an dict with id:parsedChildNode structure, and errors that occurred while parsing"
    }
  },
  {
    "__docId__": 270,
    "kind": "file",
    "name": "tp1/parser/IntegerParser.js",
    "content": "import { ParserResult } from \"./ParserResult.js\";\n\n/**\n * Parse a integer attribute from a node\n */\nexport class IntegerParser {\n    /**\n     * Parse a integer attribute from a node\n     * @param {element} node - Node that should be parsed\n     * @param {CGFXMLreader} reader - XMLreader\n     * @param {string} attributeName - Name of the attribute that should be parsed\n     * @param {int} minLimit - Minimum value of the attribute\n     * @param {int} maxLimit - Maximum value of the attribute\n     * @returns {ParserResult} - Containing a integer with the parsed attribute, and errors that occurred while parsing\n     */\n    static parse(node, reader, attributeName, minLimit=Number.NEGATIVE_INFINITY, maxLimit=Number.POSITIVE_INFINITY) {\n        let value = reader.getInteger(node, attributeName);\n        if(!(value != null && !isNaN(value) && value >= minLimit && value <= maxLimit))\n            return ParserResult.fromError(\"unable to parse \" + attributeName);\n        return ParserResult.fromValue(value);\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/parser/IntegerParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 271,
    "kind": "class",
    "name": "IntegerParser",
    "memberof": "tp1/parser/IntegerParser.js",
    "static": true,
    "longname": "tp1/parser/IntegerParser.js~IntegerParser",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/parser/IntegerParser.js",
    "importStyle": "{IntegerParser}",
    "description": "Parse a integer attribute from a node",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "parse",
    "memberof": "tp1/parser/IntegerParser.js~IntegerParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/IntegerParser.js~IntegerParser.parse",
    "access": "public",
    "description": "Parse a integer attribute from a node",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ParserResult} - Containing a integer with the parsed attribute, and errors that occurred while parsing"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "element"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Node that should be parsed"
      },
      {
        "nullable": null,
        "types": [
          "CGFXMLreader"
        ],
        "spread": false,
        "optional": false,
        "name": "reader",
        "description": "XMLreader"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "attributeName",
        "description": "Name of the attribute that should be parsed"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "minLimit",
        "description": "Minimum value of the attribute"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "maxLimit",
        "description": "Maximum value of the attribute"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ParserResult"
      ],
      "spread": false,
      "description": "Containing a integer with the parsed attribute, and errors that occurred while parsing"
    }
  },
  {
    "__docId__": 273,
    "kind": "file",
    "name": "tp1/parser/LightsParser.js",
    "content": "import { ParserResult } from \"./ParserResult.js\";\n\n/**\n * Parser for the <lights> block\n * This is an wrapper for the base code implementation of this functionality\n */\nexport class LightsParser {\n    /**\n     * Parse the <lights> block\n     * @param {lights element} node - Node that should be parsed\n     * @param {CGFXMLreader} reader - XMLreader\n     * @returns {ParserResult} - Containing a array containing the parsed lights, and errors that occurred while parsing\n     */\n    static parse(node, reader) {\n        const children = node.children;\n\n        let errors = [];\n\n        let lights = [];\n        let numLights = 0;\n\n        let grandChildren = [];\n        let nodeNames = [];\n\n        // Any number of lights.\n        for (let i = 0; i < children.length; i++) {\n\n            // Storing light information\n            let global = [];\n            let attributeNames = [];\n            let attributeTypes = [];\n\n            //Check type of light\n            if (children[i].nodeName != \"omni\" && children[i].nodeName != \"spot\") {\n                errors.push(\"unknown tag <\" + children[i].nodeName + \">\");\n                continue;\n            }\n            else {\n                attributeNames.push(...[\"location\", \"ambient\", \"diffuse\", \"specular\"]);\n                attributeTypes.push(...[\"position\", \"color\", \"color\", \"color\"]);\n            }\n\n            // Get id of the current light.\n            let lightId = reader.getString(children[i], 'id');\n            if (lightId == null) {\n                errors.push(\"no ID defined for light\");\n                continue;\n            }\n\n            // Checks for repeated IDs.\n            if (lights[lightId] != null) {\n                errors.push(\"ID must be unique for each light (conflict: id= \" + lightId + \")\");\n                continue;\n            }\n\n            // Light enable/disable\n            let enableLight = true;\n            var aux = reader.getBoolean(children[i], 'enabled');\n            if (!(aux != null && !isNaN(aux) && (aux == true || aux == false)))\n                errors.push(\"unable to parse value component of the 'enable light' field for id= \" + lightId + \"; assuming 'value = 1'\");\n\n            enableLight = aux && 1;\n\n            //Add enabled boolean and type name to light info\n            global.push(enableLight);\n            global.push(children[i].nodeName);\n\n            grandChildren = children[i].children;\n            // Specifications for the current light.\n\n            nodeNames = [];\n            for (let j = 0; j < grandChildren.length; j++) {\n                nodeNames.push(grandChildren[j].nodeName);\n            }\n\n\n            let hasUndefinedAttribute = false;\n            for (let j = 0; j < attributeNames.length; j++) {\n                let attributeIndex = nodeNames.indexOf(attributeNames[j]);\n\n\n                if (attributeIndex != -1) {\n                    if (attributeTypes[j] == \"position\")\n                        var aux = this.parseCoordinates4D(grandChildren[attributeIndex], reader, \"light position for ID\" + lightId);\n                    else\n                        var aux = this.parseColor(grandChildren[attributeIndex], reader, attributeNames[j] + \" illumination for ID\" + lightId);\n\n                    if (!Array.isArray(aux)){\n                        errors.push(\"light attribute \" + attributeNames[j] + \" undefined for id=\" + lightId);\n                        hasUndefinedAttribute = true;\n                        continue;\n                    }\n\n\n                    global.push(aux);\n                }\n                else {\n                    errors.push(\"light \" + attributeNames[i] + \" undefined for id=\" + lightId);\n                    hasUndefinedAttribute = true;\n                }\n            }\n            if(hasUndefinedAttribute) {\n                continue;\n            }\n\n            // Gets the additional attributes of the spot light\n            if (children[i].nodeName == \"spot\") {\n                var angle = reader.getFloat(children[i], 'angle');\n                if (!(angle != null && !isNaN(angle))) {\n                    errors.push(\"unable to parse angle of the light for id= \" + lightId);\n                    continue;\n                }\n\n                var exponent = reader.getFloat(children[i], 'exponent');\n                if (!(exponent != null && !isNaN(exponent))) {\n                    errors.push(\"unable to parse exponent of the light for id= \" + lightId);\n                    continue;\n                }\n\n                let targetIndex = nodeNames.indexOf(\"target\");\n\n                // Retrieves the light target.\n                var targetLight = [];\n                if (targetIndex != -1) {\n                    let aux = this.parseCoordinates3D(grandChildren[targetIndex], reader, \"target light for ID \" + lightId);\n                    if (!Array.isArray(aux)){\n                        errors.push(aux);\n                        continue;\n                    }\n\n\n                    targetLight = aux;\n                }\n                else {\n                    errors.push(\"light target undefined for id= \" + lightId);\n                    continue;\n                }\n\n                global.push(...[angle, exponent, targetLight])\n            }\n\n            lights[lightId] = global;\n            numLights++;\n        }\n\n        if (numLights == 0)\n            errors.push(\"at least one light must be defined\");\n        else if (numLights > 8)\n            errors.push(\"too many lights defined; WebGL imposes a limit of 8 lights\");\n\n        return new ParserResult(lights, errors);\n    }\n\n    /**\n     * Parse the coordinates from a node with id=id\n     * @param {block element} node - Node that should be parsed\n     * @param {CGFXMLreader} reader - XMLreader\n     * @param {message to be displayed in case of error} messageError - Message to be displayed in case of error\n     * @returns {Array} - Containing the parsed coordinates\n    */\n    static parseCoordinates3D(node, reader, messageError) {\n        var position = [];\n\n        // x\n        var x = reader.getFloat(node, 'x');\n        if (!(x != null && !isNaN(x)))\n            return \"unable to parse x-coordinate of the \" + messageError;\n\n        // y\n        var y = reader.getFloat(node, 'y');\n        if (!(y != null && !isNaN(y)))\n            return \"unable to parse y-coordinate of the \" + messageError;\n\n        // z\n        var z = reader.getFloat(node, 'z');\n        if (!(z != null && !isNaN(z)))\n            return \"unable to parse z-coordinate of the \" + messageError;\n\n        position.push(...[x, y, z]);\n\n        return position;\n    }\n\n    /**\n     * Parse the coordinates from a node with id=id\n     * @param {block element} node - Node to be parsed\n     * @param {CGFXMLreader} reader - XMLreader\n     * @param {message to be displayed in case of error} messageError - Message to be displayed in case of error\n     * @returns {Array} - Containing the parsed coordinates\n     */\n    static parseCoordinates4D(node, reader, messageError) {\n        var position = [];\n\n        //Get x, y, z\n        position = this.parseCoordinates3D(node, reader, messageError);\n\n        if (!Array.isArray(position))\n            return position;\n\n\n        // w\n        var w = reader.getFloat(node, 'w');\n        if (!(w != null && !isNaN(w)))\n            return \"unable to parse w-coordinate of the \" + messageError;\n\n        position.push(w);\n\n        return position;\n    }\n\n    /**\n     * Parse the color components from a node\n     * @param {block element} node - Node to be parsed\n     * @param {CGFXMLreader} reader - XMLreader\n     * @param {message to be displayed in case of error} messageError - Message to be displayed in case of error\n     * @returns {Array} - Containing the parsed color\n     */\n    static parseColor(node, reader, messageError) {\n        var color = [];\n\n        // R\n        var r = reader.getFloat(node, 'r');\n        if (!(r != null && !isNaN(r) && r >= 0 && r <= 1))\n            return \"unable to parse R component of the \" + messageError;\n\n        // G\n        var g = reader.getFloat(node, 'g');\n        if (!(g != null && !isNaN(g) && g >= 0 && g <= 1))\n            return \"unable to parse G component of the \" + messageError;\n\n        // B\n        var b = reader.getFloat(node, 'b');\n        if (!(b != null && !isNaN(b) && b >= 0 && b <= 1))\n            return \"unable to parse B component of the \" + messageError;\n\n        // A\n        var a = reader.getFloat(node, 'a');\n        if (!(a != null && !isNaN(a) && a >= 0 && a <= 1))\n            return \"unable to parse A component of the \" + messageError;\n\n        color.push(...[r, g, b, a]);\n\n        return color;\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/parser/LightsParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 274,
    "kind": "class",
    "name": "LightsParser",
    "memberof": "tp1/parser/LightsParser.js",
    "static": true,
    "longname": "tp1/parser/LightsParser.js~LightsParser",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/parser/LightsParser.js",
    "importStyle": "{LightsParser}",
    "description": "Parser for the <lights> block\nThis is an wrapper for the base code implementation of this functionality",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "parse",
    "memberof": "tp1/parser/LightsParser.js~LightsParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/LightsParser.js~LightsParser.parse",
    "access": "public",
    "description": "Parse the <lights> block",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ParserResult} - Containing a array containing the parsed lights, and errors that occurred while parsing"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "lights element"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Node that should be parsed"
      },
      {
        "nullable": null,
        "types": [
          "CGFXMLreader"
        ],
        "spread": false,
        "optional": false,
        "name": "reader",
        "description": "XMLreader"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ParserResult"
      ],
      "spread": false,
      "description": "Containing a array containing the parsed lights, and errors that occurred while parsing"
    }
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "parseCoordinates3D",
    "memberof": "tp1/parser/LightsParser.js~LightsParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/LightsParser.js~LightsParser.parseCoordinates3D",
    "access": "public",
    "description": "Parse the coordinates from a node with id=id",
    "lineNumber": 161,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - Containing the parsed coordinates"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "block element"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Node that should be parsed"
      },
      {
        "nullable": null,
        "types": [
          "CGFXMLreader"
        ],
        "spread": false,
        "optional": false,
        "name": "reader",
        "description": "XMLreader"
      },
      {
        "nullable": null,
        "types": [
          "message to be displayed in case of error"
        ],
        "spread": false,
        "optional": false,
        "name": "messageError",
        "description": "Message to be displayed in case of error"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Containing the parsed coordinates"
    }
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "parseCoordinates4D",
    "memberof": "tp1/parser/LightsParser.js~LightsParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/LightsParser.js~LightsParser.parseCoordinates4D",
    "access": "public",
    "description": "Parse the coordinates from a node with id=id",
    "lineNumber": 191,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - Containing the parsed coordinates"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "block element"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Node to be parsed"
      },
      {
        "nullable": null,
        "types": [
          "CGFXMLreader"
        ],
        "spread": false,
        "optional": false,
        "name": "reader",
        "description": "XMLreader"
      },
      {
        "nullable": null,
        "types": [
          "message to be displayed in case of error"
        ],
        "spread": false,
        "optional": false,
        "name": "messageError",
        "description": "Message to be displayed in case of error"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Containing the parsed coordinates"
    }
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "parseColor",
    "memberof": "tp1/parser/LightsParser.js~LightsParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/LightsParser.js~LightsParser.parseColor",
    "access": "public",
    "description": "Parse the color components from a node",
    "lineNumber": 218,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - Containing the parsed color"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "block element"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Node to be parsed"
      },
      {
        "nullable": null,
        "types": [
          "CGFXMLreader"
        ],
        "spread": false,
        "optional": false,
        "name": "reader",
        "description": "XMLreader"
      },
      {
        "nullable": null,
        "types": [
          "message to be displayed in case of error"
        ],
        "spread": false,
        "optional": false,
        "name": "messageError",
        "description": "Message to be displayed in case of error"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Containing the parsed color"
    }
  },
  {
    "__docId__": 279,
    "kind": "file",
    "name": "tp1/parser/MaterialParser.js",
    "content": "import { ParserResult } from \"./ParserResult.js\";\nimport { ColorParser } from \"./ColorParser.js\";\nimport { Color } from \"../models/Color.js\";\nimport { FloatParser } from \"./FloatParser.js\";\nimport { BlockParser } from \"./BlockParser.js\";\nimport { MyMaterial } from \"../models/wrappers/MyMaterial.js\";\n\nexport class MaterialParser {\n    static parse(node, reader, scene) {\n        if (node.nodeName != \"material\") {\n            return ParserResult.fromError(\"unknown tag <\" + node.nodeName + \">\");\n        }\n\n        let id = reader.getString(node, \"id\");\n        if (id == null) {\n            return ParserResult.fromError(\"no ID defined for material\");\n        }\n\n        let shininessResult = FloatParser.parse(node, reader, \"shininess\");\n\n        const defaultColor = new Color(0,0,0,1);\n\n        const func = (n) => ColorParser.parse(n, reader);\n        const handlerEntries = {\n            \"emission\": [func, defaultColor],\n            \"ambient\": [func, defaultColor],\n            \"diffuse\": [func, defaultColor],\n            \"specular\": [func, defaultColor],\n        };\n        const handlerMap = new Map(Object.entries(handlerEntries));\n        const parseResult = BlockParser.parse(node, handlerMap);\n\n        const components = parseResult.getValue();\n        let mat = MyMaterial.instantiate(\n            id,\n            components[\"ambient\"],\n            components[\"diffuse\"],\n            components[\"specular\"],\n            components[\"emission\"],\n            shininessResult.getValueOrDefault(10),\n            scene\n        );\n        return ParserResult.collect(mat, [shininessResult, parseResult], \"parsing <material> with id=\" + id);\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/parser/MaterialParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 280,
    "kind": "class",
    "name": "MaterialParser",
    "memberof": "tp1/parser/MaterialParser.js",
    "static": true,
    "longname": "tp1/parser/MaterialParser.js~MaterialParser",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/parser/MaterialParser.js",
    "importStyle": "{MaterialParser}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "parse",
    "memberof": "tp1/parser/MaterialParser.js~MaterialParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/MaterialParser.js~MaterialParser.parse",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "reader",
        "types": [
          "*"
        ]
      },
      {
        "name": "scene",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "file",
    "name": "tp1/parser/ParserErrorPrinter.js",
    "content": "export class ParserErrorPrinter {\n    static print(error, nesting_level=0) {\n        if(Array.isArray(error)){\n            for(const e of error){\n                if (typeof e === 'string' || e instanceof String){\n                    console.warn(\" \".repeat(nesting_level*4) + e);\n                } else {\n                    for(const [context, otherErrors] of Object.entries(e)) {\n                        console.warn(\" \".repeat(nesting_level*4) + \"context: \" + context);\n                        this.print(otherErrors, nesting_level+1);\n                    }\n                }\n            }\n        } else {\n            console.log(\" \".repeat(nesting_level*4) + error);\n        }\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/parser/ParserErrorPrinter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 283,
    "kind": "class",
    "name": "ParserErrorPrinter",
    "memberof": "tp1/parser/ParserErrorPrinter.js",
    "static": true,
    "longname": "tp1/parser/ParserErrorPrinter.js~ParserErrorPrinter",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/parser/ParserErrorPrinter.js",
    "importStyle": "{ParserErrorPrinter}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "print",
    "memberof": "tp1/parser/ParserErrorPrinter.js~ParserErrorPrinter",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/ParserErrorPrinter.js~ParserErrorPrinter.print",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "error",
        "types": [
          "*"
        ]
      },
      {
        "name": "nesting_level",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      }
    ],
    "return": null
  },
  {
    "__docId__": 285,
    "kind": "file",
    "name": "tp1/parser/ParserResult.js",
    "content": "export class ParserResult {\n    constructor(value, errors){\n        this.value = value;\n        this.errors = errors;\n    }\n\n    static fromError(error) {\n        return new ParserResult(null, [error]);\n    }\n    \n    static fromValue(value) {\n        return new ParserResult(value, []);\n    }\n    \n    static collect(value, parserResults, context, other_errors=[]){\n        let errors = other_errors;\n        for(const parserResult of parserResults){\n            errors = errors.concat(parserResult.getErrors());\n        }\n        if(errors.length > 0){\n            let k = {};\n            k[context] = errors;\n            return new ParserResult(value, [k]);\n        }\n        return this.fromValue(value);\n    }\n\n    getValue() {\n        return this.value;\n    }\n\n    getValueOrDefault(defaultValue) {\n        return this.value == null ? defaultValue : this.value;\n    }\n\n    getErrors() {\n        return this.errors;\n    }\n    \n    hasError() {\n        return this.errors.length > 0;\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/parser/ParserResult.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 286,
    "kind": "class",
    "name": "ParserResult",
    "memberof": "tp1/parser/ParserResult.js",
    "static": true,
    "longname": "tp1/parser/ParserResult.js~ParserResult",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/parser/ParserResult.js",
    "importStyle": "{ParserResult}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 287,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "tp1/parser/ParserResult.js~ParserResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/parser/ParserResult.js~ParserResult#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "value",
    "memberof": "tp1/parser/ParserResult.js~ParserResult",
    "static": false,
    "longname": "tp1/parser/ParserResult.js~ParserResult#value",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "member",
    "name": "errors",
    "memberof": "tp1/parser/ParserResult.js~ParserResult",
    "static": false,
    "longname": "tp1/parser/ParserResult.js~ParserResult#errors",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "fromError",
    "memberof": "tp1/parser/ParserResult.js~ParserResult",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/ParserResult.js~ParserResult.fromError",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "error",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "fromValue",
    "memberof": "tp1/parser/ParserResult.js~ParserResult",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/ParserResult.js~ParserResult.fromValue",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "collect",
    "memberof": "tp1/parser/ParserResult.js~ParserResult",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/ParserResult.js~ParserResult.collect",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "parserResults",
        "types": [
          "*"
        ]
      },
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "other_errors",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "getValue",
    "memberof": "tp1/parser/ParserResult.js~ParserResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/parser/ParserResult.js~ParserResult#getValue",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "getValueOrDefault",
    "memberof": "tp1/parser/ParserResult.js~ParserResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/parser/ParserResult.js~ParserResult#getValueOrDefault",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "defaultValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "getErrors",
    "memberof": "tp1/parser/ParserResult.js~ParserResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/parser/ParserResult.js~ParserResult#getErrors",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "hasError",
    "memberof": "tp1/parser/ParserResult.js~ParserResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/parser/ParserResult.js~ParserResult#hasError",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 297,
    "kind": "file",
    "name": "tp1/parser/PrimitiveParser.js",
    "content": "import { ParserResult } from \"./ParserResult.js\";\nimport { FloatParser } from \"./FloatParser.js\";\nimport { IntegerParser } from \"./IntegerParser.js\";\nimport { MyRectangle } from \"../primitives/MyRectangle.js\";\nimport { MyTriangle } from \"../primitives/MyTriangle.js\";\nimport { MyCylinder } from \"../primitives/MyCylinder.js\";\nimport { MySphere } from \"../primitives/MySphere.js\";\nimport { MyTorus } from \"../primitives/MyTorus.js\";\nimport {PrimitiveNode} from \"../models/graph/PrimitiveNode.js\";\n\nexport class PrimitiveParser {\n    static parse(node, reader, scene) {\n        if (node.nodeName !== \"primitive\") {\n            return ParserResult.fromError(\"unknown tag <\" + node.nodeName + \">\");\n        }\n\n        let id = reader.getString(node, \"id\");\n        if (id == null) {\n            return ParserResult.fromError(\"no id defined for primitive\");\n        }\n\n        if (node.children.length === 1) {\n            let childNode = node.children[0];\n            let primitiveType = childNode.nodeName;\n\n            if (primitiveType === 'rectangle') {\n                return PrimitiveParser.parseRectangle(childNode, reader, scene, id);\n            } else if (primitiveType === 'triangle') {\n                return PrimitiveParser.parseTriangle(childNode, reader, scene, id);\n            } else if (primitiveType === 'cylinder') {\n                return PrimitiveParser.parseCylinder(childNode, reader, scene, id);\n            } else if (primitiveType === 'sphere') {\n                return PrimitiveParser.parseSphere(childNode, reader, scene, id);\n            } else if (primitiveType === 'torus') {\n                return PrimitiveParser.parseTorus(childNode, reader, scene, id);\n            }\n        }\n        return ParserResult.fromError(\"There must be exactly 1 primitive type (rectangle, triangle, cylinder, sphere or torus)\");\n    }\n    \n    static parseRectangle(node, reader, scene, id) {\n        let x1 = FloatParser.parse(node, reader, 'x1');\n        let y1 = FloatParser.parse(node, reader, 'y1');\n        let x2 = FloatParser.parse(node, reader, 'x2', x1.getValueOrDefault(0));\n        let y2 = FloatParser.parse(node, reader, 'y2', y1.getValueOrDefault(0));\n\n        let rectangle = new MyRectangle(\n            scene, \n            x1.getValueOrDefault(0), \n            x2.getValueOrDefault(1), \n            y1.getValueOrDefault(0), \n            y2.getValueOrDefault(1)\n        );\n        return ParserResult.collect(\n            new PrimitiveNode(id, rectangle),\n            [x1, y1, x2, y2],\n            \"parsing <rectangle> with id=\" + id\n        );\n    }\n\n    static parseTriangle(node, reader, scene, id) {\n        let x1 = FloatParser.parse(node, reader, 'x1');\n        let y1 = FloatParser.parse(node, reader, 'y1');\n        let z1 = FloatParser.parse(node, reader, 'z1');\n\n        let x2 = FloatParser.parse(node, reader, 'x2');\n        let y2 = FloatParser.parse(node, reader, 'y2');\n        let z2 = FloatParser.parse(node, reader, 'z2');\n\n        let x3 = FloatParser.parse(node, reader, 'x3');\n        let y3 = FloatParser.parse(node, reader, 'y3');\n        let z3 = FloatParser.parse(node, reader, 'z3');\n\n        let triangle = new MyTriangle(\n            scene, \n            x1.getValueOrDefault(0), \n            x2.getValueOrDefault(1),\n            x3.getValueOrDefault(0),\n            y1.getValueOrDefault(0),\n            y2.getValueOrDefault(0),\n            y3.getValueOrDefault(1),\n            z1.getValueOrDefault(0),\n            z2.getValueOrDefault(0),\n            z3.getValueOrDefault(0)\n        );\n\n        return ParserResult.fromValue(\n            new PrimitiveNode(id, triangle),\n            [x1,y1,z1,x2,y2,z2,x3,y3,z3],\n            \"parsing <triangle> with id=\" + id);\n    }\n\n    static parseCylinder(node, reader, scene, id) {\n        let baseRadius = FloatParser.parse(node, reader, 'base', 0);\n        let topRadius = FloatParser.parse(node, reader, 'top', 0);\n        let height = FloatParser.parse(node, reader, 'height', 0);\n        let slices = IntegerParser.parse(node, reader, 'slices', 1);\n        let stacks = IntegerParser.parse(node, reader, 'stacks', 1);\n\n        let collection = ParserResult.collect(null, [baseRadius, topRadius, height, slices, stacks]);\n        if (collection.hasError()) {\n            return collection;\n        }\n\n        let cylinder = new MyCylinder(\n            scene, \n            baseRadius.getValueOrDefault(1),\n            topRadius.getValueOrDefault(1),\n            height.getValueOrDefault(1),\n            slices.getValueOrDefault(8),\n            stacks.getValueOrDefault(8)\n        );\n        \n        return ParserResult.collect(\n            new PrimitiveNode(id, cylinder),\n            [baseRadius, topRadius, height, slices, stacks],\n            \"parsing <cylinder> with id=\" + id\n        );\n    }\n\n    static parseSphere(node, reader, scene, id) {\n        let radius = FloatParser.parse(node, reader, 'radius', 0);\n        let slices = IntegerParser.parse(node, reader, 'slices', 1);\n        let stacks = IntegerParser.parse(node, reader, 'stacks', 1);\n\n        let sphere = new MySphere(\n            scene, \n            radius.getValueOrDefault(1),\n            slices.getValueOrDefault(8),\n            stacks.getValueOrDefault(8)\n        );\n\n        return ParserResult.collect(\n            new PrimitiveNode(id, sphere),\n            [radius, slices, stacks],\n            \"parsing <sphere> with id=\" + id\n        );\n    }\n\n    static parseTorus(node, reader, scene, id) {\n        let inner = FloatParser.parse(node, reader, 'inner', 0);\n        let outer = FloatParser.parse(node, reader, 'outer', 0);\n        let slices = IntegerParser.parse(node, reader, 'slices', 1);\n        let loops = IntegerParser.parse(node, reader, 'loops', 1);\n\n        let torus = new MyTorus(\n            scene, \n            inner.getValueOrDefault(1),\n            outer.getValueOrDefault(1),\n            slices.getValueOrDefault(8),\n            loops.getValueOrDefault(8)\n        );\n\n        return ParserResult.collect(\n            new PrimitiveNode(id, torus),\n            [inner, outer, slices, loops],\n            \"parsing <torus> with id=\" + id\n        );\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/parser/PrimitiveParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 298,
    "kind": "class",
    "name": "PrimitiveParser",
    "memberof": "tp1/parser/PrimitiveParser.js",
    "static": true,
    "longname": "tp1/parser/PrimitiveParser.js~PrimitiveParser",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/parser/PrimitiveParser.js",
    "importStyle": "{PrimitiveParser}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "parse",
    "memberof": "tp1/parser/PrimitiveParser.js~PrimitiveParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/PrimitiveParser.js~PrimitiveParser.parse",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "reader",
        "types": [
          "*"
        ]
      },
      {
        "name": "scene",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "parseRectangle",
    "memberof": "tp1/parser/PrimitiveParser.js~PrimitiveParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/PrimitiveParser.js~PrimitiveParser.parseRectangle",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "reader",
        "types": [
          "*"
        ]
      },
      {
        "name": "scene",
        "types": [
          "*"
        ]
      },
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "parseTriangle",
    "memberof": "tp1/parser/PrimitiveParser.js~PrimitiveParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/PrimitiveParser.js~PrimitiveParser.parseTriangle",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "reader",
        "types": [
          "*"
        ]
      },
      {
        "name": "scene",
        "types": [
          "*"
        ]
      },
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "parseCylinder",
    "memberof": "tp1/parser/PrimitiveParser.js~PrimitiveParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/PrimitiveParser.js~PrimitiveParser.parseCylinder",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "reader",
        "types": [
          "*"
        ]
      },
      {
        "name": "scene",
        "types": [
          "*"
        ]
      },
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "parseSphere",
    "memberof": "tp1/parser/PrimitiveParser.js~PrimitiveParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/PrimitiveParser.js~PrimitiveParser.parseSphere",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "reader",
        "types": [
          "*"
        ]
      },
      {
        "name": "scene",
        "types": [
          "*"
        ]
      },
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "parseTorus",
    "memberof": "tp1/parser/PrimitiveParser.js~PrimitiveParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/PrimitiveParser.js~PrimitiveParser.parseTorus",
    "access": "public",
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "reader",
        "types": [
          "*"
        ]
      },
      {
        "name": "scene",
        "types": [
          "*"
        ]
      },
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 305,
    "kind": "file",
    "name": "tp1/parser/RotationParser.js",
    "content": "import { ParserResult } from \"./ParserResult.js\";\nimport { Rotation } from \"../models/Rotation.js\";\nimport { FloatParser } from \"./FloatParser.js\";\n\nexport class RotationParser {\n    static parse(node, reader){\n        let errors = [];\n\n        // Get axis\n        const axis = reader.getString(node, 'axis');\n        if (!(axis != null && axis.length === 1 && ['x', 'y', 'z'].includes(axis)))\n            return ParserResult.fromError(\"unable to parse axis\");\n\n        // Get angle\n        const angleResult = FloatParser.parse(node, reader, 'angle');\n        if(angleResult.hasError()){\n            return new ParserResult(null, angleResult.getErrors());\n        }\n\n        return ParserResult.fromValue(new Rotation(axis, angleResult.getValue()));\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/parser/RotationParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 306,
    "kind": "class",
    "name": "RotationParser",
    "memberof": "tp1/parser/RotationParser.js",
    "static": true,
    "longname": "tp1/parser/RotationParser.js~RotationParser",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/parser/RotationParser.js",
    "importStyle": "{RotationParser}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "parse",
    "memberof": "tp1/parser/RotationParser.js~RotationParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/RotationParser.js~RotationParser.parse",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "reader",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "file",
    "name": "tp1/parser/TextureParser.js",
    "content": "import { ParserResult } from \"./ParserResult.js\";\nimport { MyTexture } from \"../models/wrappers/MyTexture.js\";\n\nexport class TextureParser {\n    static parse(node, reader, scene) {\n        if (node.nodeName !== \"texture\") {\n            return ParserResult.fromError(\"unknown tag <\" + node.nodeName + \">\");\n        }\n\n        const id = reader.getString(node, \"id\");\n        if (id == null) {\n            return ParserResult.fromError(\"no ID defined for texture\");\n        }\n\n        let fileUrl = reader.getString(node, 'file');\n        if (fileUrl == null) {\n            return ParserResult.fromError(\"no file defined for texture with ID = \" + id);\n        }\n        // TODO: Check if file exists?\n\n        return ParserResult.fromValue(MyTexture.instantiate(id, 1, 1, scene, fileUrl));\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/parser/TextureParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 309,
    "kind": "class",
    "name": "TextureParser",
    "memberof": "tp1/parser/TextureParser.js",
    "static": true,
    "longname": "tp1/parser/TextureParser.js~TextureParser",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/parser/TextureParser.js",
    "importStyle": "{TextureParser}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 310,
    "kind": "method",
    "name": "parse",
    "memberof": "tp1/parser/TextureParser.js~TextureParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/TextureParser.js~TextureParser.parse",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "reader",
        "types": [
          "*"
        ]
      },
      {
        "name": "scene",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 311,
    "kind": "file",
    "name": "tp1/parser/TransformationParser.js",
    "content": "import { ParserResult } from \"./ParserResult.js\";\nimport { MyTransformation } from \"../models/wrappers/MyTransformation.js\";\nimport { RotationParser } from \"./RotationParser.js\";\nimport { Coordinate3DParser } from \"./Coordinate3DParser.js\";\n\nexport class TransformationParser {\n    static parse(node, reader, needsId=true) {\n        if(node.nodeName !== \"transformation\") {\n            return ParserResult.fromError(\"unknown tag <\" + node.nodeName + \">\");\n        }\n\n        let id = null;\n        if(needsId){\n            id = reader.getString(node, \"id\");\n            if (id == null) {\n                return ParserResult.fromError(\"no ID defined for transformation\");\n            }\n        }\n\n        let transformationMatrix = mat4.create();\n        let results = [];\n        let errors = [];\n\n        for(let child of node.children) {\n            switch(child.nodeName) {\n                case 'translate':\n                    let translate_coordinates = Coordinate3DParser.parse(child, reader);\n                    if(!translate_coordinates.hasError()){\n                        transformationMatrix = mat4.translate(\n                            transformationMatrix, \n                            transformationMatrix, \n                            translate_coordinates.getValue().getArray()\n                        );\n                    } else {\n                        results.push(translate_coordinates);\n                    }\n                    break;\n                case 'scale':\n                    let scale_coordinates = Coordinate3DParser.parse(child, reader);\n                    if(!scale_coordinates.hasError()){\n                        transformationMatrix = mat4.scale(\n                            transformationMatrix, \n                            transformationMatrix, \n                            scale_coordinates.getValue().getArray()\n                        );\n                    } else {\n                        results.push(scale_coordinates);\n                    }\n                    break;\n                case 'rotate':\n                    let rotation = RotationParser.parse(child, reader);\n                    if(!rotation.hasError()){\n                        transformationMatrix = mat4.rotate(\n                            transformationMatrix, \n                            transformationMatrix, \n                            rotation.getValue().getAngle(),\n                            rotation.getValue().getAxisArray()\n                        );\n                    } else {\n                        results.push(rotation);\n                    }\n                    break;\n                default:\n                    errors.push(\"unknown tag <\" + child.nodeName + \">\");\n                    break;\n            }\n        }\n        return ParserResult.collect(new MyTransformation(id, transformationMatrix), results, \"parsing <transformation>\", errors);\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/parser/TransformationParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 312,
    "kind": "class",
    "name": "TransformationParser",
    "memberof": "tp1/parser/TransformationParser.js",
    "static": true,
    "longname": "tp1/parser/TransformationParser.js~TransformationParser",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/parser/TransformationParser.js",
    "importStyle": "{TransformationParser}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 313,
    "kind": "method",
    "name": "parse",
    "memberof": "tp1/parser/TransformationParser.js~TransformationParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/TransformationParser.js~TransformationParser.parse",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "reader",
        "types": [
          "*"
        ]
      },
      {
        "name": "needsId",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "file",
    "name": "tp1/parser/ViewParser.js",
    "content": "import { ParserResult } from \"./ParserResult.js\";\nimport { FloatParser } from \"./FloatParser.js\";\nimport { BlockParser } from \"./BlockParser.js\";\nimport { Coordinate3DParser } from \"./Coordinate3DParser.js\";\nimport { Coordinate3D } from \"../models/Coordinate3D.js\";\nimport { MyView } from \"../models/wrappers/MyView.js\";\n\nvar DEGREE_TO_RAD = Math.PI / 180;\n\nexport class ViewParser {\n    static parse(node, reader) {\n        if (node.nodeName != \"perspective\" && node.nodeName != \"ortho\") {\n            return ParserResult.fromError(\"unknown tag <\" + node.nodeName + \">\");\n        }\n        let id = reader.getString(node, \"id\");\n\n        if (id == null)\n            return ParserResult.fromError(\"no ID defined for view\");\n        \n        let near = FloatParser.parse(node, reader, \"near\", 0);\n        let far = FloatParser.parse(node, reader, \"far\", 0);\n\n        const defaultCoord = new Coordinate3D(0, 0, 0);\n        const func = (c) => Coordinate3DParser.parse(c, reader);\n        const handlerEntries = {\n            \"from\": [func, defaultCoord],\n            \"to\": [func, defaultCoord]\n        };\n\n        const handlerMap = new Map(Object.entries(handlerEntries));\n        const result = BlockParser.parse(node, handlerMap);\n\n        if (node.nodeName == \"perspective\") {\n            let angle = FloatParser.parse(node, reader, \"angle\", 0);\n            if (angle.hasError())\n                return angle;\n\n            let view = MyView.instantiate(\n                id, \n                angle.getValueOrDefault(90) * DEGREE_TO_RAD, \n                near.getValueOrDefault(0),\n                far.getValueOrDefault(100),\n                vec3.fromValues(...result.getValue()[\"from\"].getArray()),\n                vec3.fromValues(...result.getValue()[\"to\"].getArray())\n            );\n\n            return ParserResult.fromValue(\n                view,\n                [angle, near, far, result],\n                \"parsing <perspective> with id=\" + id\n            );\n        } else if (node.nodeName == \"ortho\") {\n            let left = FloatParser.parse(node, reader, \"left\");\n            let right = FloatParser.parse(node, reader, \"right\");\n            let top = FloatParser.parse(node, reader, \"top\");\n            let bottom = FloatParser.parse(node, reader, \"bottom\");\n\n            let up = ParserResult.fromValue(new Coordinate3D(0, 1, 0));\n            for (const child of node.children) {\n                if (child.nodeName == \"up\") {\n                    up = Coordinate3DParser.parse(child, reader);\n                }\n            }\n\n            let viewOrtho = MyView.instantiateOrtho(\n                id,\n                left.getValueOrDefault(-10),\n                right.getValueOrDefault(10),\n                bottom.getValueOrDefault(-10),\n                top.getValueOrDefault(10),\n                near.getValueOrDefault(0),\n                far.getValueOrDefault(100),\n                vec3.fromValues(...result.getValue()[\"from\"].getArray()),\n                vec3.fromValues(...result.getValue()[\"to\"].getArray()),\n                up.getValueOrDefault([0,1,0]).getArray()\n            );\n\n            return ParserResult.fromValue(viewOrtho);\n        }\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/parser/ViewParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 315,
    "kind": "variable",
    "name": "DEGREE_TO_RAD",
    "memberof": "tp1/parser/ViewParser.js",
    "static": true,
    "longname": "tp1/parser/ViewParser.js~DEGREE_TO_RAD",
    "access": "public",
    "export": false,
    "importPath": "sgi/tp1/parser/ViewParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 316,
    "kind": "class",
    "name": "ViewParser",
    "memberof": "tp1/parser/ViewParser.js",
    "static": true,
    "longname": "tp1/parser/ViewParser.js~ViewParser",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/parser/ViewParser.js",
    "importStyle": "{ViewParser}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "parse",
    "memberof": "tp1/parser/ViewParser.js~ViewParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/ViewParser.js~ViewParser.parse",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "reader",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 318,
    "kind": "file",
    "name": "tp1/parser/component/ComponentChildrenParser.js",
    "content": "import {ParserResult} from \"../ParserResult.js\";\n\n/**\n * Parse the <children> element inside a <component> element\n */\nexport class ComponentChildrenParser {\n    /**\n     * Parse the <children> element inside a <component> element\n     * @param {children element} node - <children> element\n     * @param {XMLReader} reader - XMLReader\n     * @returns {ParserResult} - ParserResult with a Object containing a list of component ids and a list of primitive ids, and errors that occurred while parsing\n     */\n    static parse(node, reader) {\n        let components = [];\n        let primitives = [];\n        let errors = [];\n\n        for(const child of node.children) {\n            let childNodeName = child.nodeName;\n\n            let id = reader.getString(child, \"id\");\n            if(childNodeName === \"componentref\") {\n                if(id != null){\n                    components.push(id);\n                } else {\n                    errors.push(\"no ID defined for componentref\");\n                }\n            } else if (childNodeName === \"primitiveref\") {\n                if(id != null) {\n                    primitives.push(id);\n                } else {\n                    errors.push(\"no ID defined for primitiveref\");\n                }\n            } else {\n                errors.push(\"unknown tag <\" + childNodeName + \">\");\n            }\n        }\n        return new ParserResult({'components': components, 'primitives': primitives}, errors);\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/parser/component/ComponentChildrenParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 319,
    "kind": "class",
    "name": "ComponentChildrenParser",
    "memberof": "tp1/parser/component/ComponentChildrenParser.js",
    "static": true,
    "longname": "tp1/parser/component/ComponentChildrenParser.js~ComponentChildrenParser",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/parser/component/ComponentChildrenParser.js",
    "importStyle": "{ComponentChildrenParser}",
    "description": "Parse the <children> element inside a <component> element",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 320,
    "kind": "method",
    "name": "parse",
    "memberof": "tp1/parser/component/ComponentChildrenParser.js~ComponentChildrenParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/component/ComponentChildrenParser.js~ComponentChildrenParser.parse",
    "access": "public",
    "description": "Parse the <children> element inside a <component> element",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ParserResult} - ParserResult with a Object containing a list of component ids and a list of primitive ids, and errors that occurred while parsing"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "children element"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "<children> element"
      },
      {
        "nullable": null,
        "types": [
          "XMLReader"
        ],
        "spread": false,
        "optional": false,
        "name": "reader",
        "description": "XMLReader"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ParserResult"
      ],
      "spread": false,
      "description": "ParserResult with a Object containing a list of component ids and a list of primitive ids, and errors that occurred while parsing"
    }
  },
  {
    "__docId__": 321,
    "kind": "file",
    "name": "tp1/parser/component/ComponentParser.js",
    "content": "import { ParserResult } from \"../ParserResult.js\";\nimport { ComponentNode } from \"../../models/graph/ComponentNode.js\";\nimport {ComponentTransformationParser} from \"./ComponentTransformationParser.js\";\nimport {ComponentChildrenParser} from \"./ComponentChildrenParser.js\";\nimport {MyTexture} from \"../../models/wrappers/MyTexture.js\";\nimport { MyTransformation } from \"../../models/wrappers/MyTransformation.js\";\nimport {FloatParser} from \"../FloatParser.js\";\n\n/**\n * Parser for the <component> node\n */\nexport class ComponentParser {\n    /**\n     * Parse a single <component> node\n     * @param {Component element} node - Node that should be parsed\n     * @param {CGFXMLreader} reader - XMLreader\n     * @param {SceneData} sceneData - Scene data\n     * @returns {ParserResult} - Containing the parsed MyComponent and errors that occurred while parsing\n     */\n    static parse(node, reader, sceneData) {\n        console.log(node, typeof node);\n        if (node.nodeName != \"component\") {\n            return ParserResult.fromError(\"unknown tag <\" + node.nodeName + \">\");\n        }\n\n        let id = reader.getString(node, \"id\");\n        if (id == null) {\n            return ParserResult.fromError(\"no ID defined for component\");\n        }\n\n        const children = node.children;\n        let nodeNames = [];\n        for (let j = 0; j < children.length; j++) {\n            nodeNames.push(children[j].nodeName);\n        }\n        const transformationIndex = nodeNames.indexOf(\"transformation\");\n        const materialsIndex = nodeNames.indexOf(\"materials\");\n        const textureIndex = nodeNames.indexOf(\"texture\");\n        const childrenIndex = nodeNames.indexOf(\"children\");\n\n        let errors = [];\n        let results = [];\n\n        if(transformationIndex != -1) {\n            var transformationResult = ComponentTransformationParser.parse(children[transformationIndex], reader, sceneData);\n            results.push(transformationResult);\n            var transformation = transformationResult.getValue();\n        } else {\n            errors.push(\"required <transformation> is missing\");\n            var transformation = new MyTransformation(null);\n        }\n\n        if(childrenIndex != -1) {\n            var childrenResult = ComponentChildrenParser.parse(children[childrenIndex], reader);\n            results.push(childrenResult);\n            var componentChildren = childrenResult.getValue();\n        } else {\n            errors.push(\"required <children> is missing\");\n            var componentChildren = {\"components\": [], \"primitives\": []};\n        }\n\n        if(materialsIndex != -1) {\n            var materialsResult = this.parseMaterial(children[materialsIndex], reader, sceneData);\n            results.push(materialsResult);\n            var materials = materialsResult.getValue();\n        } else {\n            errors.push(\"required <materials> is missing\");\n            var materials = [\"inherit\"];\n        }\n\n        if (textureIndex != -1) {\n            var textureResult = this.parseTexture(children[textureIndex], reader, sceneData);\n            results.push(textureResult);\n            var texture = textureResult.getValue();\n        } else {\n            errors.push(\"required <texture> is missing\");\n            var texture = \"none\";\n        }\n\n        return ParserResult.collect(\n            new ComponentNode(\n                id,\n                transformation,\n                materials,\n                texture,\n                componentChildren[\"components\"],\n                componentChildren[\"primitives\"],\n            ),\n            results,\n            \"parsing <component> with id=\" + id,\n            errors\n        );\n    }\n\n    /**\n     * Parse the <texture> node within an <element> node\n     * @param {texture element} node - Node that should be parsed\n     * @param {CGFXMLreader} reader - XMLreader\n     * @param {SceneData} sceneData - Scene data\n     * @returns {ParserResult} - Containing the parsed MyTexture (or \"inherit\"/\"none\") and errors that occurred while parsing\n     */\n    static parseTexture(node, reader, sceneData) {\n        if (node.nodeName !== \"texture\") {\n            return ParserResult.fromError(\"unknown tag <\" + node.nodeName + \">\");\n        }\n\n        // Get id of the current texture.\n        const id = reader.getString(node, 'id');\n        if (id == null) {\n            return ParserResult.fromError(\"no ID defined for texture\");\n        }\n\n        if(id === \"inherit\" || id === \"none\") {\n            return ParserResult.fromValue(id);\n        }\n\n        // Check if texture exists\n        if (sceneData.textures[id] == null) {\n            return ParserResult.fromError(\"Texture with ID \" + id + \" does not exist\");\n        }\n\n        const length_sResult = FloatParser.parse(node, reader, 'length_s', 0);\n        const length_s = length_sResult.getValueOrDefault(1);\n\n        const length_tResult = FloatParser.parse(node, reader, 'length_t', 0);\n        const length_t = length_tResult.getValueOrDefault(1);\n\n        const referenceTexture = sceneData.textures[id];\n        return ParserResult.collect(\n                new MyTexture(referenceTexture.getId(), referenceTexture.getCGFTexture(), length_s, length_t),\n                [length_sResult, length_tResult],\n                \"parsing <texture> with id=\" + id\n        );\n    }\n\n    /**\n     * Parse the <materials> node within an <element> node\n     * @param {materials element} node - Node that should be parsed\n     * @param {CGFXMLreader} reader - XMLreader\n     * @param {SceneData} sceneData - Scene data\n     * @returns {ParserResult} - Containing the parsed materials (or \"inherit\") and errors that occurred while parsing\n     */\n    static parseMaterial(node, reader, sceneData) {\n        let materials = [];\n        let errors = []\n        for(const child of node.children) {\n            if(child.nodeName !== \"material\"){\n                errors.push(\"Unexpected tag <\" + child.nodeName + \">\");\n                continue;\n            }\n            const id = reader.getString(child, \"id\");\n            if(id != null){\n                if(sceneData.materials[id] != null) {\n                    materials.push(sceneData.materials[id]);\n                } else if(id === \"inherit\") {\n                    materials.push(id);\n                } else {\n                    errors.push(\"material with id=\" + id + \" does not exist\");\n                }\n            } else {\n                errors.push(\"missing id on <material>\");\n            }\n        }\n\n        return new ParserResult(materials, errors);\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/parser/component/ComponentParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 322,
    "kind": "class",
    "name": "ComponentParser",
    "memberof": "tp1/parser/component/ComponentParser.js",
    "static": true,
    "longname": "tp1/parser/component/ComponentParser.js~ComponentParser",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/parser/component/ComponentParser.js",
    "importStyle": "{ComponentParser}",
    "description": "Parser for the <component> node",
    "lineNumber": 12,
    "interface": false
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "parse",
    "memberof": "tp1/parser/component/ComponentParser.js~ComponentParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/component/ComponentParser.js~ComponentParser.parse",
    "access": "public",
    "description": "Parse a single <component> node",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ParserResult} - Containing the parsed MyComponent and errors that occurred while parsing"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Component element"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Node that should be parsed"
      },
      {
        "nullable": null,
        "types": [
          "CGFXMLreader"
        ],
        "spread": false,
        "optional": false,
        "name": "reader",
        "description": "XMLreader"
      },
      {
        "nullable": null,
        "types": [
          "SceneData"
        ],
        "spread": false,
        "optional": false,
        "name": "sceneData",
        "description": "Scene data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ParserResult"
      ],
      "spread": false,
      "description": "Containing the parsed MyComponent and errors that occurred while parsing"
    }
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "parseTexture",
    "memberof": "tp1/parser/component/ComponentParser.js~ComponentParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/component/ComponentParser.js~ComponentParser.parseTexture",
    "access": "public",
    "description": "Parse the <texture> node within an <element> node",
    "lineNumber": 102,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ParserResult} - Containing the parsed MyTexture (or \"inherit\"/\"none\") and errors that occurred while parsing"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "texture element"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Node that should be parsed"
      },
      {
        "nullable": null,
        "types": [
          "CGFXMLreader"
        ],
        "spread": false,
        "optional": false,
        "name": "reader",
        "description": "XMLreader"
      },
      {
        "nullable": null,
        "types": [
          "SceneData"
        ],
        "spread": false,
        "optional": false,
        "name": "sceneData",
        "description": "Scene data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ParserResult"
      ],
      "spread": false,
      "description": "Containing the parsed MyTexture (or \"inherit\"/\"none\") and errors that occurred while parsing"
    }
  },
  {
    "__docId__": 325,
    "kind": "method",
    "name": "parseMaterial",
    "memberof": "tp1/parser/component/ComponentParser.js~ComponentParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/component/ComponentParser.js~ComponentParser.parseMaterial",
    "access": "public",
    "description": "Parse the <materials> node within an <element> node",
    "lineNumber": 143,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ParserResult} - Containing the parsed materials (or \"inherit\") and errors that occurred while parsing"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "materials element"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Node that should be parsed"
      },
      {
        "nullable": null,
        "types": [
          "CGFXMLreader"
        ],
        "spread": false,
        "optional": false,
        "name": "reader",
        "description": "XMLreader"
      },
      {
        "nullable": null,
        "types": [
          "SceneData"
        ],
        "spread": false,
        "optional": false,
        "name": "sceneData",
        "description": "Scene data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ParserResult"
      ],
      "spread": false,
      "description": "Containing the parsed materials (or \"inherit\") and errors that occurred while parsing"
    }
  },
  {
    "__docId__": 326,
    "kind": "file",
    "name": "tp1/parser/component/ComponentsLinker.js",
    "content": "/**\n * Class responsible for linking components references\n */\nexport class ComponentsLinker {\n    /**\n     * Links the components references in the given SceneData\n     * @param {SceneData} sceneData - Reference to the SceneData\n     * @returns List of errors\n     */\n    static link(sceneData){\n        let errors = [];\n        for(const [componentId, component] of Object.entries(sceneData.components)) {\n            let children = [];\n            for(const id of component.childComponentsId) {\n                if(sceneData.components[id] != null){\n                    children.push(sceneData.components[id]);\n                } else {\n                    errors.push(\"Component with id=\" + id + \" does not exists (Used in componente with id=\" + componentId + \")\");\n                }\n\n            }\n            for(const id of component.childPrimitivesId) {\n                if(sceneData.primitives[id] != null){\n                    children.push(sceneData.primitives[id]);\n                }else {\n                    errors.push(\"Primitive with id=\" + id + \" does not exists (Used in componente with id=\" + componentId + \")\");\n                }\n            }\n            component.setChildren(children);\n            component.childComponentsId = null; // Free unecessary memory usage\n            component.childPrimitivesId = null;\n        }\n        return errors;\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/parser/component/ComponentsLinker.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 327,
    "kind": "class",
    "name": "ComponentsLinker",
    "memberof": "tp1/parser/component/ComponentsLinker.js",
    "static": true,
    "longname": "tp1/parser/component/ComponentsLinker.js~ComponentsLinker",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/parser/component/ComponentsLinker.js",
    "importStyle": "{ComponentsLinker}",
    "description": "Class responsible for linking components references",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "link",
    "memberof": "tp1/parser/component/ComponentsLinker.js~ComponentsLinker",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/parser/component/ComponentsLinker.js~ComponentsLinker.link",
    "access": "public",
    "description": "Links the components references in the given SceneData",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "List of errors"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "SceneData"
        ],
        "spread": false,
        "optional": false,
        "name": "sceneData",
        "description": "Reference to the SceneData"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "List of errors"
    }
  },
  {
    "__docId__": 329,
    "kind": "file",
    "name": "tp1/primitives/MyCylinder.js",
    "content": "import { CGFobject } from '../../lib/CGF.js';\n\n/**\n * MyCilinder\n */\nexport class MyCylinder extends CGFobject {\n    /**\n     * @param {CGFscene} scene - Reference to MyScene object\n     * @param {float} baseRadius - radius of the cylinder base\n     * @param {float} topRadius - radius of the cylinder top\n     * @param {float} height - height of the cylinder\n     * @param {int} slices - number of divisions around the Y axis\n     * @param {int} stacks - number of divisions along the height\n     */\n    constructor(scene, baseRadius, topRadius, height, slices, stacks) {\n        super(scene);\n        this.baseRadius = baseRadius;\n        this.topRadius = topRadius;\n        this.height = height;\n        this.slices = slices;\n        this.stacks = stacks;\n        this.initBuffers();\n    }\n\n    /**\n     * Initializes the buffers of the primitive\n     */\n    initBuffers() {\n        this.vertices = [];\n        this.indices = [];\n        this.normals = [];\n        this.texCoords = [];\n\n        const alphaAng = 2 * Math.PI / this.slices;\n        const alphaHeight = this.height / this.stacks;\n        const alphaRadius = (this.topRadius - this.baseRadius) / this.stacks;\n        const normalSlope = (this.baseRadius - this.topRadius) / this.height;\n        var radius = this.baseRadius;\n        var x, y, ang, height = 0;\n\n        // TODO: OPTIMIZE RADIUS = 0 ?\n        for (var stack = 0; stack <= this.stacks; ++stack) {\n            ang = 0;\n            for (var slice = 0; slice <= this.slices; ++slice) {\n                // Calculate vertex position\n                x = Math.cos(ang);\n                y = Math.sin(ang);\n\n                // Push vertex position\n                this.vertices.push(x * radius, y * radius, height);\n\n                // Push vertex normal\n                this.normals.push(x, y, normalSlope);\n\n                ang += alphaAng;\n            }\n            radius += alphaRadius;\n            height += alphaHeight;\n        }\n\n        // TODO: OPTIMIZE CALCULATIONS (repetitions like: vertexPerStack * i)\n        var vertexPerStack = this.slices + 1;\n        var bottomCurrent, bottomNext, topCurrent, topNext;\n        for (var i = 0; i < this.stacks; ++i) {\n            for (var j = 0; j < this.slices; ++j) {\n                // Update variables\n                bottomCurrent = vertexPerStack * i + j;\n                bottomNext = vertexPerStack * i + (j + 1);\n                topCurrent = vertexPerStack * (i + 1) + j;\n                topNext = vertexPerStack * (i + 1) + (j + 1);\n\n                // Top Triangle\n                this.indices.push(bottomNext, topCurrent, bottomCurrent);\n\n                // Bottom Triangle\n                this.indices.push(bottomNext, topNext, topCurrent);\n            }\n        }\n\n        this.primitiveType = this.scene.gl.TRIANGLES;\n        this.initGLBuffers();\n    }\n\n    /**\n\t * Updates the texture coordinates of the primitive according to the given lengths.\n\t * @param {float} length_u - Horizontal length of the texture\n\t * @param {float} length_v - Vertical length of the texture\n\t */\n    updateTexLength(length_u, length_v) {\n        // Not implemented\n\t}\n}\n",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/primitives/MyCylinder.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 330,
    "kind": "class",
    "name": "MyCylinder",
    "memberof": "tp1/primitives/MyCylinder.js",
    "static": true,
    "longname": "tp1/primitives/MyCylinder.js~MyCylinder",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/primitives/MyCylinder.js",
    "importStyle": "{MyCylinder}",
    "description": "MyCilinder",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "lib/CGF.js~CGFobject"
    ]
  },
  {
    "__docId__": 331,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "tp1/primitives/MyCylinder.js~MyCylinder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/primitives/MyCylinder.js~MyCylinder#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "CGFscene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "Reference to MyScene object"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "baseRadius",
        "description": "radius of the cylinder base"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "topRadius",
        "description": "radius of the cylinder top"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "height of the cylinder"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "slices",
        "description": "number of divisions around the Y axis"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "stacks",
        "description": "number of divisions along the height"
      }
    ]
  },
  {
    "__docId__": 332,
    "kind": "member",
    "name": "baseRadius",
    "memberof": "tp1/primitives/MyCylinder.js~MyCylinder",
    "static": false,
    "longname": "tp1/primitives/MyCylinder.js~MyCylinder#baseRadius",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 333,
    "kind": "member",
    "name": "topRadius",
    "memberof": "tp1/primitives/MyCylinder.js~MyCylinder",
    "static": false,
    "longname": "tp1/primitives/MyCylinder.js~MyCylinder#topRadius",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 334,
    "kind": "member",
    "name": "height",
    "memberof": "tp1/primitives/MyCylinder.js~MyCylinder",
    "static": false,
    "longname": "tp1/primitives/MyCylinder.js~MyCylinder#height",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 335,
    "kind": "member",
    "name": "slices",
    "memberof": "tp1/primitives/MyCylinder.js~MyCylinder",
    "static": false,
    "longname": "tp1/primitives/MyCylinder.js~MyCylinder#slices",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 336,
    "kind": "member",
    "name": "stacks",
    "memberof": "tp1/primitives/MyCylinder.js~MyCylinder",
    "static": false,
    "longname": "tp1/primitives/MyCylinder.js~MyCylinder#stacks",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 337,
    "kind": "method",
    "name": "initBuffers",
    "memberof": "tp1/primitives/MyCylinder.js~MyCylinder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/primitives/MyCylinder.js~MyCylinder#initBuffers",
    "access": "public",
    "description": "Initializes the buffers of the primitive",
    "lineNumber": 28,
    "params": [],
    "return": null
  },
  {
    "__docId__": 338,
    "kind": "member",
    "name": "vertices",
    "memberof": "tp1/primitives/MyCylinder.js~MyCylinder",
    "static": false,
    "longname": "tp1/primitives/MyCylinder.js~MyCylinder#vertices",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 339,
    "kind": "member",
    "name": "indices",
    "memberof": "tp1/primitives/MyCylinder.js~MyCylinder",
    "static": false,
    "longname": "tp1/primitives/MyCylinder.js~MyCylinder#indices",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 340,
    "kind": "member",
    "name": "normals",
    "memberof": "tp1/primitives/MyCylinder.js~MyCylinder",
    "static": false,
    "longname": "tp1/primitives/MyCylinder.js~MyCylinder#normals",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 341,
    "kind": "member",
    "name": "texCoords",
    "memberof": "tp1/primitives/MyCylinder.js~MyCylinder",
    "static": false,
    "longname": "tp1/primitives/MyCylinder.js~MyCylinder#texCoords",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 342,
    "kind": "member",
    "name": "primitiveType",
    "memberof": "tp1/primitives/MyCylinder.js~MyCylinder",
    "static": false,
    "longname": "tp1/primitives/MyCylinder.js~MyCylinder#primitiveType",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "updateTexLength",
    "memberof": "tp1/primitives/MyCylinder.js~MyCylinder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/primitives/MyCylinder.js~MyCylinder#updateTexLength",
    "access": "public",
    "description": "Updates the texture coordinates of the primitive according to the given lengths.",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "length_u",
        "description": "Horizontal length of the texture"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "length_v",
        "description": "Vertical length of the texture"
      }
    ],
    "return": null
  },
  {
    "__docId__": 344,
    "kind": "file",
    "name": "tp1/primitives/MyRectangle.js",
    "content": "import { CGFobject } from '../../lib/CGF.js';\n/**\n * MyRectangle\n */\nexport class MyRectangle extends CGFobject {\n\t/**\n\t * @param {CGFScene} scene - Reference to MyScene object\n\t * @param {float} x1 - x coordinate of the first point\n\t * @param {float} x2 - x coordinate of the second point\n\t * @param {float} y1 - y coordinate of the first point\n\t * @param {float} y2 - y coordinate of the second point\n\t */\n\tconstructor(scene, x1, x2, y1, y2) {\n\t\tsuper(scene);\n\t\tthis.x1 = x1;\n\t\tthis.x2 = x2;\n\t\tthis.y1 = y1;\n\t\tthis.y2 = y2;\n\n\t\tthis.initBuffers();\n\t}\n\t\n\t/**\n\t * Initializes the buffers of the primitive\n\t */\n\tinitBuffers() {\n\t\tthis.vertices = [\n\t\t\tthis.x1, this.y1, 0,\t//0\n\t\t\tthis.x2, this.y1, 0,\t//1\n\t\t\tthis.x1, this.y2, 0,\t//2\n\t\t\tthis.x2, this.y2, 0\t\t//3\n\t\t];\n\n\t\t//Counter-clockwise reference of vertices\n\t\tthis.indices = [\n\t\t\t0, 1, 2,\n\t\t\t1, 3, 2\n\t\t];\n\n\t\t//Facing Z positive\n\t\tthis.normals = [\n\t\t\t0, 0, 1,\n\t\t\t0, 0, 1,\n\t\t\t0, 0, 1,\n\t\t\t0, 0, 1\n\t\t];\n\t\t\n\t\t/*\n\t\tTexture coords (s,t)\n\t\t+----------> s\n        |\n        |\n\t\t|\n\t\tv\n        t\n        */\n\n\t\tthis.texCoords = [\n\t\t\t0, 1,\n\t\t\t1, 1,\n\t\t\t0, 0,\n\t\t\t1, 0\n\t\t]\n\t\tthis.primitiveType = this.scene.gl.TRIANGLES;\n\t\tthis.initGLBuffers();\n\t}\n\n\t/**\n\t * @method updateTexCoords\n\t * Updates the list of texture coordinates of the rectangle\n\t * @param {Array} coords - Array of texture coordinates\n\t */\n\tupdateTexCoords(coords) {\n\t\tthis.texCoords = [...coords];\n\t\tthis.updateTexCoordsGLBuffers();\n\t}\n\n\t/**\n\t * Updates the texture coordinates of the rectangle according to the given lengths.\n\t * @param {float} length_u - Horizontal length of the texture\n\t * @param {float} length_v - Vertical length of the texture\n\t */\n\t updateTexLength(length_u, length_v) {\n\t\tlet u = 1 / length_u;\n\t\tlet v = 1 / length_v;\n\t\tlet coords = [\n\t\t\t0, v,\n\t\t\tu, v,\n\t\t\t0, 0,\n\t\t\tu, 0\n\t\t];\n\t\tthis.updateTexCoords(coords);\n\t}\n}\n\n",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/primitives/MyRectangle.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 345,
    "kind": "class",
    "name": "MyRectangle",
    "memberof": "tp1/primitives/MyRectangle.js",
    "static": true,
    "longname": "tp1/primitives/MyRectangle.js~MyRectangle",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/primitives/MyRectangle.js",
    "importStyle": "{MyRectangle}",
    "description": "MyRectangle",
    "lineNumber": 5,
    "interface": false,
    "extends": [
      "lib/CGF.js~CGFobject"
    ]
  },
  {
    "__docId__": 346,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "tp1/primitives/MyRectangle.js~MyRectangle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/primitives/MyRectangle.js~MyRectangle#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "CGFScene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "Reference to MyScene object"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": "x coordinate of the first point"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "x2",
        "description": "x coordinate of the second point"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "y1",
        "description": "y coordinate of the first point"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "y2",
        "description": "y coordinate of the second point"
      }
    ]
  },
  {
    "__docId__": 347,
    "kind": "member",
    "name": "x1",
    "memberof": "tp1/primitives/MyRectangle.js~MyRectangle",
    "static": false,
    "longname": "tp1/primitives/MyRectangle.js~MyRectangle#x1",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 348,
    "kind": "member",
    "name": "x2",
    "memberof": "tp1/primitives/MyRectangle.js~MyRectangle",
    "static": false,
    "longname": "tp1/primitives/MyRectangle.js~MyRectangle#x2",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 349,
    "kind": "member",
    "name": "y1",
    "memberof": "tp1/primitives/MyRectangle.js~MyRectangle",
    "static": false,
    "longname": "tp1/primitives/MyRectangle.js~MyRectangle#y1",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "member",
    "name": "y2",
    "memberof": "tp1/primitives/MyRectangle.js~MyRectangle",
    "static": false,
    "longname": "tp1/primitives/MyRectangle.js~MyRectangle#y2",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 351,
    "kind": "method",
    "name": "initBuffers",
    "memberof": "tp1/primitives/MyRectangle.js~MyRectangle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/primitives/MyRectangle.js~MyRectangle#initBuffers",
    "access": "public",
    "description": "Initializes the buffers of the primitive",
    "lineNumber": 26,
    "params": [],
    "return": null
  },
  {
    "__docId__": 352,
    "kind": "member",
    "name": "vertices",
    "memberof": "tp1/primitives/MyRectangle.js~MyRectangle",
    "static": false,
    "longname": "tp1/primitives/MyRectangle.js~MyRectangle#vertices",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 353,
    "kind": "member",
    "name": "indices",
    "memberof": "tp1/primitives/MyRectangle.js~MyRectangle",
    "static": false,
    "longname": "tp1/primitives/MyRectangle.js~MyRectangle#indices",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "number[]"
      ]
    }
  },
  {
    "__docId__": 354,
    "kind": "member",
    "name": "normals",
    "memberof": "tp1/primitives/MyRectangle.js~MyRectangle",
    "static": false,
    "longname": "tp1/primitives/MyRectangle.js~MyRectangle#normals",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "number[]"
      ]
    }
  },
  {
    "__docId__": 355,
    "kind": "member",
    "name": "texCoords",
    "memberof": "tp1/primitives/MyRectangle.js~MyRectangle",
    "static": false,
    "longname": "tp1/primitives/MyRectangle.js~MyRectangle#texCoords",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "number[]"
      ]
    }
  },
  {
    "__docId__": 356,
    "kind": "member",
    "name": "primitiveType",
    "memberof": "tp1/primitives/MyRectangle.js~MyRectangle",
    "static": false,
    "longname": "tp1/primitives/MyRectangle.js~MyRectangle#primitiveType",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 357,
    "kind": "method",
    "name": "updateTexCoords",
    "memberof": "tp1/primitives/MyRectangle.js~MyRectangle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/primitives/MyRectangle.js~MyRectangle#updateTexCoords",
    "access": "public",
    "description": "",
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "updateTexCoords\nUpdates the list of texture coordinates of the rectangle"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "coords",
        "description": "Array of texture coordinates"
      }
    ],
    "return": null
  },
  {
    "__docId__": 359,
    "kind": "method",
    "name": "updateTexLength",
    "memberof": "tp1/primitives/MyRectangle.js~MyRectangle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/primitives/MyRectangle.js~MyRectangle#updateTexLength",
    "access": "public",
    "description": "Updates the texture coordinates of the rectangle according to the given lengths.",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "length_u",
        "description": "Horizontal length of the texture"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "length_v",
        "description": "Vertical length of the texture"
      }
    ],
    "return": null
  },
  {
    "__docId__": 360,
    "kind": "file",
    "name": "tp1/primitives/MySphere.js",
    "content": "import { CGFobject } from '../../lib/CGF.js';\n/**\n * MySphere\n */\nexport class MySphere extends CGFobject {\n\t/**\n \t* @param scene - Reference to MyScene object\n\t* @param radius - Radius of sphere\n\t* @param slices - Number of slices\n\t* @param stacks - Number of stacks between the center and one of the poles.\n\t */\n\tconstructor(scene, radius, slices, stacks) {\n\t\tsuper(scene);\n\t\tthis.radius = radius;\n        this.slices = slices;\n        this.stacks = 2 * stacks;\n\n\t\tthis.initBuffers();\n\t}\n\n\t/**\n\t * Initializes the buffers of the primitive\n\t */\n\tinitBuffers() {\n\t\tthis.vertices = [];\n\t\tthis.indices = [];\n\t\tthis.normals = [];\n\t\tthis.texCoords = [];\n\n\t\tvar phi = 0;\n\t\tvar phiInc = Math.PI / this.stacks;\n\t\tvar thetaInc = (2 * Math.PI) / this.slices;\n\t\tvar stackVertices = this.slices + 1;\n\n\t\tvar thetaCache = [];\n\t\tfor(let slice = 0; slice <= this.slices; slice++){\n\t\t\tlet theta = thetaInc*slice;\n\t\t\tthetaCache.push([Math.sin(-theta), Math.cos(theta)]);\n\t\t}\n\t\t\n\t\t// build an all-around stack at a time\n\t\tfor (let stack = 0; stack <= this.stacks; stack++) {\n\t\t\tvar sinPhi = Math.sin(phi);\n\t\t\tvar cosPhi = Math.cos(phi);\n\n\t\t\tsinPhi = sinPhi*this.radius\n\t\t\t\n\t\t\t// in each stack, build all the slices around\n\t\t\tfor (let slice = 0; slice <= this.slices; slice++) {\n\t\t\t\t//--- Vertices coordinates\n\t\t\t\tvar [x,y] = thetaCache[slice];\n\t\t\t\tvar x =  x*sinPhi;\n\t\t\t\tvar y =  y*sinPhi\n\t\t\t\tvar z = cosPhi*this.radius;\n\t\t\t\tthis.vertices.push(x, y, z);\n\n\t\t\t\t//--- Indices\n\t\t\t\tif (stack < this.stacks && slice < this.slices) {\n\t\t\t\t\tvar current = stack * stackVertices + slice;\n\t\t\t\t\tvar next = current + stackVertices;\n\n\t\t\t\t\t// pushing two triangles using indices from this round (current, current+1)\n\t\t\t\t\t// and the ones directly south (next, next+1)\n\t\t\t\t\t// (i.e. one full round of slices ahead)\n\t\t\t\t\tthis.indices.push( current + 1, current, next);\n\t\t\t\t\tthis.indices.push( current + 1, next, next +1);\n\t\t\t\t}\n\n\t\t\t\t//--- Normals\n\t\t\t\t// at each vertex, the direction of the normal is equal to \n\t\t\t\t// the vector from the center of the sphere to the vertex.\n\t\t\t\t// in a sphere of radius equal to one, the vector length is one.\n\t\t\t\t// therefore, the value of the normal is equal to the position vector\n\t\t\t\tthis.normals.push(x, y, z);\n\t\t\t}\n\t\t\tphi += phiInc;\n\t\t}\n\n\t\tthis.primitiveType = this.scene.gl.TRIANGLES;\n\t\tthis.initGLBuffers();\n\t}\n\n\t/**\n\t * Updates the texture coordinates of the primitive according to the given lengths.\n\t * @param {float} length_u - Horizontal length of the texture\n\t * @param {float} length_v - Vertical length of the texture\n\t */\n\tupdateTexLength(length_u, length_v) {\n        // Not implemented\n\t}\n}\n\n",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/primitives/MySphere.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 361,
    "kind": "class",
    "name": "MySphere",
    "memberof": "tp1/primitives/MySphere.js",
    "static": true,
    "longname": "tp1/primitives/MySphere.js~MySphere",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/primitives/MySphere.js",
    "importStyle": "{MySphere}",
    "description": "MySphere",
    "lineNumber": 5,
    "interface": false,
    "extends": [
      "lib/CGF.js~CGFobject"
    ]
  },
  {
    "__docId__": 362,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "tp1/primitives/MySphere.js~MySphere",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/primitives/MySphere.js~MySphere#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "Reference to MyScene object"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "radius",
        "description": "Radius of sphere"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "slices",
        "description": "Number of slices"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "stacks",
        "description": "Number of stacks between the center and one of the poles."
      }
    ]
  },
  {
    "__docId__": 363,
    "kind": "member",
    "name": "radius",
    "memberof": "tp1/primitives/MySphere.js~MySphere",
    "static": false,
    "longname": "tp1/primitives/MySphere.js~MySphere#radius",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 364,
    "kind": "member",
    "name": "slices",
    "memberof": "tp1/primitives/MySphere.js~MySphere",
    "static": false,
    "longname": "tp1/primitives/MySphere.js~MySphere#slices",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 365,
    "kind": "member",
    "name": "stacks",
    "memberof": "tp1/primitives/MySphere.js~MySphere",
    "static": false,
    "longname": "tp1/primitives/MySphere.js~MySphere#stacks",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "initBuffers",
    "memberof": "tp1/primitives/MySphere.js~MySphere",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/primitives/MySphere.js~MySphere#initBuffers",
    "access": "public",
    "description": "Initializes the buffers of the primitive",
    "lineNumber": 24,
    "params": [],
    "return": null
  },
  {
    "__docId__": 367,
    "kind": "member",
    "name": "vertices",
    "memberof": "tp1/primitives/MySphere.js~MySphere",
    "static": false,
    "longname": "tp1/primitives/MySphere.js~MySphere#vertices",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 368,
    "kind": "member",
    "name": "indices",
    "memberof": "tp1/primitives/MySphere.js~MySphere",
    "static": false,
    "longname": "tp1/primitives/MySphere.js~MySphere#indices",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 369,
    "kind": "member",
    "name": "normals",
    "memberof": "tp1/primitives/MySphere.js~MySphere",
    "static": false,
    "longname": "tp1/primitives/MySphere.js~MySphere#normals",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 370,
    "kind": "member",
    "name": "texCoords",
    "memberof": "tp1/primitives/MySphere.js~MySphere",
    "static": false,
    "longname": "tp1/primitives/MySphere.js~MySphere#texCoords",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 371,
    "kind": "member",
    "name": "primitiveType",
    "memberof": "tp1/primitives/MySphere.js~MySphere",
    "static": false,
    "longname": "tp1/primitives/MySphere.js~MySphere#primitiveType",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "updateTexLength",
    "memberof": "tp1/primitives/MySphere.js~MySphere",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/primitives/MySphere.js~MySphere#updateTexLength",
    "access": "public",
    "description": "Updates the texture coordinates of the primitive according to the given lengths.",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "length_u",
        "description": "Horizontal length of the texture"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "length_v",
        "description": "Vertical length of the texture"
      }
    ],
    "return": null
  },
  {
    "__docId__": 373,
    "kind": "file",
    "name": "tp1/primitives/MyTorus.js",
    "content": "import { CGFobject } from '../../lib/CGF.js';\n\n/**\n * MyTorus\n */\nexport class MyTorus extends CGFobject {\n    /**\n     * @param {CGFScene} scene - Reference to MyScene object\n     * @param {float} inner - inner radius of the torus\n     * @param {float} outer - outer radius of the torus\n     * @param {int} slices - number of slices\n     * @param {int} loops - number of loops\n     */\n\tconstructor(scene, inner, outer, slices, loops) {\n\t\tsuper(scene);\n\t\tthis.inner = inner;\n        this.outer = outer;\n        this.slices = slices;\n        this.loops = loops;\n\n\t\tthis.initBuffers();\n\t}\n\n\t/**\n     * Initializes the buffers of the primitive\n     */\n\tinitBuffers() {\n\t\tthis.vertices = [];\n\t\tthis.indices = [];\n\t\tthis.normals = [];\n\n        let theta = 0;\n        let thetaInc = 2*Math.PI / this.slices;\n        let phi = 0;\n        let phiInc = 2*Math.PI / this.loops;\n\n        var phiCache = [];\n\t\tfor(let loop = 0; loop < this.loops; ++loop){\n\t\t\tphiCache.push([Math.sin(phi), Math.cos(phi)]);\n            phi += phiInc;\n\t\t}\n\n        for(let slice = 0; slice < this.slices; ++slice){ // theta\n            let cosTheta = Math.cos(theta);\n            let sinTheta = Math.sin(theta);\n\n            // z = r * sin(theta)\n            // x = (R+r*cos(theta)) * cos(phi)\n            // y = (R+r*cos(theta)) * sin(phi)\n            //     ----------------\n            //     sliceComponent\n\n            let sliceComponent = this.outer+this.inner*cosTheta;\n            let z = this.inner * sinTheta;\n\n            for(let loop = 0; loop < this.loops; ++loop) { // phi\n                let [sinPhi, cosPhi] = phiCache[loop];\n                \n                let x = sliceComponent * cosPhi;\n                let y = sliceComponent * sinPhi;\n                this.vertices.push(...[x,y,z]);\n\n                let normalX = cosTheta * cosPhi;\n                let normalY = cosTheta * sinPhi;\n                let normalZ = sinTheta;\n                this.normals.push(...[normalX, normalY, normalZ]);\n            }\n            theta += thetaInc;\n        }\n\n        for(let slice = 0; slice < this.slices; ++slice){\n            let sliceOffset = slice * (this.loops); // TODO: Optimize? next could be reused\n            let nextSliceOffset = ((slice+1) % this.slices) * (this.loops);\n\n            for(let loop = 0; loop < this.loops; ++loop){\n                this.indices.push(...[\n                    sliceOffset+loop, \n                    sliceOffset+((loop+1)%this.loops),\n                    nextSliceOffset+loop\n                ]);\n                this.indices.push(...[\n                    nextSliceOffset+loop, \n                    sliceOffset+((loop+1)%this.loops),\n                    nextSliceOffset+((loop+1)%this.loops)\n                ]);\n            }\n        }\n\n\t\tthis.primitiveType = this.scene.gl.TRIANGLES;\n\t\tthis.initGLBuffers();\n\t}\n\n    /**\n\t * Updates the texture coordinates of the primitive according to the given lengths.\n\t * @param {float} length_u - Horizontal length of the texture\n\t * @param {float} length_v - Vertical length of the texture\n\t */\n    updateTexLength(length_u, length_v) {\n        // Not implemented\n\t}\n}\n\n",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/primitives/MyTorus.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 374,
    "kind": "class",
    "name": "MyTorus",
    "memberof": "tp1/primitives/MyTorus.js",
    "static": true,
    "longname": "tp1/primitives/MyTorus.js~MyTorus",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/primitives/MyTorus.js",
    "importStyle": "{MyTorus}",
    "description": "MyTorus",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "lib/CGF.js~CGFobject"
    ]
  },
  {
    "__docId__": 375,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "tp1/primitives/MyTorus.js~MyTorus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/primitives/MyTorus.js~MyTorus#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "CGFScene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "Reference to MyScene object"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "inner",
        "description": "inner radius of the torus"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "outer",
        "description": "outer radius of the torus"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "slices",
        "description": "number of slices"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "loops",
        "description": "number of loops"
      }
    ]
  },
  {
    "__docId__": 376,
    "kind": "member",
    "name": "inner",
    "memberof": "tp1/primitives/MyTorus.js~MyTorus",
    "static": false,
    "longname": "tp1/primitives/MyTorus.js~MyTorus#inner",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 377,
    "kind": "member",
    "name": "outer",
    "memberof": "tp1/primitives/MyTorus.js~MyTorus",
    "static": false,
    "longname": "tp1/primitives/MyTorus.js~MyTorus#outer",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 378,
    "kind": "member",
    "name": "slices",
    "memberof": "tp1/primitives/MyTorus.js~MyTorus",
    "static": false,
    "longname": "tp1/primitives/MyTorus.js~MyTorus#slices",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 379,
    "kind": "member",
    "name": "loops",
    "memberof": "tp1/primitives/MyTorus.js~MyTorus",
    "static": false,
    "longname": "tp1/primitives/MyTorus.js~MyTorus#loops",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 380,
    "kind": "method",
    "name": "initBuffers",
    "memberof": "tp1/primitives/MyTorus.js~MyTorus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/primitives/MyTorus.js~MyTorus#initBuffers",
    "access": "public",
    "description": "Initializes the buffers of the primitive",
    "lineNumber": 27,
    "params": [],
    "return": null
  },
  {
    "__docId__": 381,
    "kind": "member",
    "name": "vertices",
    "memberof": "tp1/primitives/MyTorus.js~MyTorus",
    "static": false,
    "longname": "tp1/primitives/MyTorus.js~MyTorus#vertices",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "member",
    "name": "indices",
    "memberof": "tp1/primitives/MyTorus.js~MyTorus",
    "static": false,
    "longname": "tp1/primitives/MyTorus.js~MyTorus#indices",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 383,
    "kind": "member",
    "name": "normals",
    "memberof": "tp1/primitives/MyTorus.js~MyTorus",
    "static": false,
    "longname": "tp1/primitives/MyTorus.js~MyTorus#normals",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 384,
    "kind": "member",
    "name": "primitiveType",
    "memberof": "tp1/primitives/MyTorus.js~MyTorus",
    "static": false,
    "longname": "tp1/primitives/MyTorus.js~MyTorus#primitiveType",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 385,
    "kind": "method",
    "name": "updateTexLength",
    "memberof": "tp1/primitives/MyTorus.js~MyTorus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/primitives/MyTorus.js~MyTorus#updateTexLength",
    "access": "public",
    "description": "Updates the texture coordinates of the primitive according to the given lengths.",
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "length_u",
        "description": "Horizontal length of the texture"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "length_v",
        "description": "Vertical length of the texture"
      }
    ],
    "return": null
  },
  {
    "__docId__": 386,
    "kind": "file",
    "name": "tp1/primitives/MyTriangle.js",
    "content": "import { CGFobject } from '../../lib/CGF.js';\n\n/**\n * MyTriangle\n */\nexport class MyTriangle extends CGFobject {\n\t/**\n\t * @param {CGFScene} scene - Reference to MyScene object\n\t * @param {float} x1 - x coordinate of the first point\n\t * @param {float} y1 - y coordinate of the first point\n\t * @param {float} z1 - z coordinate of the first point\n\t * @param {float} x2 - x coordinate of the second point\n\t * @param {float} y2 - y coordinate of the second point\n\t * @param {float} z2 - z coordinate of the second point\n\t * @param {float} x3 - x coordinate of the third point\n\t * @param {float} y3 - y coordinate of the third point\n\t * @param {float} z3 - z coordinate of the third point\n\t */\n\tconstructor(scene, x1, x2, x3, y1, y2, y3, z1, z2, z3) {\n\t\tsuper(scene);\n\t\t// Vertex 1\n\t\tthis.x1 = x1;\n\t\tthis.y1 = y1;\n\t\tthis.z1 = z1;\n\n\t\t// Vertex 2\n\t\tthis.x2 = x2;\n\t\tthis.y2 = y2;\n\t\tthis.z2 = z2;\n\n\t\t// Vertex 3\n\t\tthis.x3 = x3;\n        this.y3 = y3;\n        this.z3 = z3;\n\n\t\t// Side lengths\n\t\tthis.a = MyTriangle.calculateDistance([x1, y1, z1], [x2, y2, z2]);\n\t\tthis.b = MyTriangle.calculateDistance([x2, y2, z2], [x3, y3, z3]);\n\t\tthis.c = MyTriangle.calculateDistance([x1, y1, z1], [x3, y3, z3]);\n\n\t\t// Auxiliar variables\n\t\tthis.cosA = (Math.pow(this.a, 2) - Math.pow(this.b, 2) + Math.pow(this.c, 2)) / (2 * this.a * this.c);\n\t\tthis.sinA = Math.sqrt(1 - Math.pow(this.cosA, 2));\n\n\t\tthis.texCoordsBuffer\n\n\t\tthis.initBuffers();\n\t}\n\n\t/**\n\t * Calculates the distance between two vertices\n\t * @param {Array<float>} v1 - Coordinates of the first vertex\n\t * @param {Array<float>} v2 - Coordinates of the second vertex\n\t * @returns distance between the two vertices\n\t */\n\tstatic calculateDistance(v1, v2) {\n\t\treturn Math.sqrt(Math.pow(v1[0] - v2[0], 2) + Math.pow(v1[1] - v2[1], 2) + Math.pow(v1[2] - v2[2], 2));\n\t}\n\t\n\t/**\n\t * Initializes the triangle buffers\n\t */\n\tinitBuffers() {\n\t\tthis.vertices = [\n\t\t\tthis.x1, this.y1, this.z1,\t//0\n\t\t\tthis.x2, this.y2, this.z2,\t//1\n\t\t\tthis.x3, this.y3, this.z3,\t//2\n\t\t];\n\n\t\t//Counter-clockwise reference of vertices\n\t\tthis.indices = [\n\t\t\t0, 1, 2\n\t\t];\n\n\t\t// Normals\n\t\tlet v1 = [this.x2 - this.x1, this.y2 - this.y1, this.z2 - this.z1];\n\t\tlet v2 = [this.x3 - this.x1, this.y3 - this.y1, this.z3 - this.z1];\n\t\tlet normal = vec3.create();\n\t\tvec3.cross(normal, v1, v2);\n\n\t\tthis.normals = [\n\t\t\tnormal[0], normal[1], normal[2],\n\t\t\tnormal[0], normal[1], normal[2],\n\t\t\tnormal[0], normal[1], normal[2]\n\t\t];\n\t\t\n\t\tthis.updateTexLength(1, 1);\n\n\t\tthis.primitiveType = this.scene.gl.TRIANGLES;\n\t\tthis.initGLBuffers();\n\t}\n\n\t/**\n\t * @method updateTexCoords\n\t * Updates the list of texture coordinates of the triangle\n\t * @param {Array} coords - Array of texture coordinates\n\t */\n\tupdateTexCoords(coords) {\n\t\tthis.texCoords = [...coords];\n\t\tthis.updateTexCoordsGLBuffers();\n\t}\n\n\t/**\n\t * Updates the texture coordinates of the triangle according to the given lengths.\n\t * @param {float} length_u - Horizontal length of the texture\n\t * @param {float} length_v - Vertical length of the texture\n\t */\n\tupdateTexLength(length_u, length_v) {\n\t\tlet coords = [\n\t\t\t0, 0,\n\t\t\tthis.a / length_u, 0,\n\t\t\tthis.c * this.cosA / length_u, this.c * this.sinA / length_v\n\t\t];\n\t\tthis.updateTexCoords(coords);\n\t}\n}\n\n",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/primitives/MyTriangle.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 387,
    "kind": "class",
    "name": "MyTriangle",
    "memberof": "tp1/primitives/MyTriangle.js",
    "static": true,
    "longname": "tp1/primitives/MyTriangle.js~MyTriangle",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/primitives/MyTriangle.js",
    "importStyle": "{MyTriangle}",
    "description": "MyTriangle",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "lib/CGF.js~CGFobject"
    ]
  },
  {
    "__docId__": 388,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "tp1/primitives/MyTriangle.js~MyTriangle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/primitives/MyTriangle.js~MyTriangle#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "CGFScene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "Reference to MyScene object"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": "x coordinate of the first point"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "y1",
        "description": "y coordinate of the first point"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "z1",
        "description": "z coordinate of the first point"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "x2",
        "description": "x coordinate of the second point"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "y2",
        "description": "y coordinate of the second point"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "z2",
        "description": "z coordinate of the second point"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "x3",
        "description": "x coordinate of the third point"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "y3",
        "description": "y coordinate of the third point"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "z3",
        "description": "z coordinate of the third point"
      }
    ]
  },
  {
    "__docId__": 389,
    "kind": "member",
    "name": "x1",
    "memberof": "tp1/primitives/MyTriangle.js~MyTriangle",
    "static": false,
    "longname": "tp1/primitives/MyTriangle.js~MyTriangle#x1",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 390,
    "kind": "member",
    "name": "y1",
    "memberof": "tp1/primitives/MyTriangle.js~MyTriangle",
    "static": false,
    "longname": "tp1/primitives/MyTriangle.js~MyTriangle#y1",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 391,
    "kind": "member",
    "name": "z1",
    "memberof": "tp1/primitives/MyTriangle.js~MyTriangle",
    "static": false,
    "longname": "tp1/primitives/MyTriangle.js~MyTriangle#z1",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 392,
    "kind": "member",
    "name": "x2",
    "memberof": "tp1/primitives/MyTriangle.js~MyTriangle",
    "static": false,
    "longname": "tp1/primitives/MyTriangle.js~MyTriangle#x2",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 393,
    "kind": "member",
    "name": "y2",
    "memberof": "tp1/primitives/MyTriangle.js~MyTriangle",
    "static": false,
    "longname": "tp1/primitives/MyTriangle.js~MyTriangle#y2",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 394,
    "kind": "member",
    "name": "z2",
    "memberof": "tp1/primitives/MyTriangle.js~MyTriangle",
    "static": false,
    "longname": "tp1/primitives/MyTriangle.js~MyTriangle#z2",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 395,
    "kind": "member",
    "name": "x3",
    "memberof": "tp1/primitives/MyTriangle.js~MyTriangle",
    "static": false,
    "longname": "tp1/primitives/MyTriangle.js~MyTriangle#x3",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 396,
    "kind": "member",
    "name": "y3",
    "memberof": "tp1/primitives/MyTriangle.js~MyTriangle",
    "static": false,
    "longname": "tp1/primitives/MyTriangle.js~MyTriangle#y3",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 397,
    "kind": "member",
    "name": "z3",
    "memberof": "tp1/primitives/MyTriangle.js~MyTriangle",
    "static": false,
    "longname": "tp1/primitives/MyTriangle.js~MyTriangle#z3",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 398,
    "kind": "member",
    "name": "a",
    "memberof": "tp1/primitives/MyTriangle.js~MyTriangle",
    "static": false,
    "longname": "tp1/primitives/MyTriangle.js~MyTriangle#a",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 399,
    "kind": "member",
    "name": "b",
    "memberof": "tp1/primitives/MyTriangle.js~MyTriangle",
    "static": false,
    "longname": "tp1/primitives/MyTriangle.js~MyTriangle#b",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 400,
    "kind": "member",
    "name": "c",
    "memberof": "tp1/primitives/MyTriangle.js~MyTriangle",
    "static": false,
    "longname": "tp1/primitives/MyTriangle.js~MyTriangle#c",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 401,
    "kind": "member",
    "name": "cosA",
    "memberof": "tp1/primitives/MyTriangle.js~MyTriangle",
    "static": false,
    "longname": "tp1/primitives/MyTriangle.js~MyTriangle#cosA",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 402,
    "kind": "member",
    "name": "sinA",
    "memberof": "tp1/primitives/MyTriangle.js~MyTriangle",
    "static": false,
    "longname": "tp1/primitives/MyTriangle.js~MyTriangle#sinA",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 403,
    "kind": "method",
    "name": "calculateDistance",
    "memberof": "tp1/primitives/MyTriangle.js~MyTriangle",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "tp1/primitives/MyTriangle.js~MyTriangle.calculateDistance",
    "access": "public",
    "description": "Calculates the distance between two vertices",
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "distance between the two vertices"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<float>"
        ],
        "spread": false,
        "optional": false,
        "name": "v1",
        "description": "Coordinates of the first vertex"
      },
      {
        "nullable": null,
        "types": [
          "Array<float>"
        ],
        "spread": false,
        "optional": false,
        "name": "v2",
        "description": "Coordinates of the second vertex"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "distance between the two vertices"
    }
  },
  {
    "__docId__": 404,
    "kind": "method",
    "name": "initBuffers",
    "memberof": "tp1/primitives/MyTriangle.js~MyTriangle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/primitives/MyTriangle.js~MyTriangle#initBuffers",
    "access": "public",
    "description": "Initializes the triangle buffers",
    "lineNumber": 63,
    "params": [],
    "return": null
  },
  {
    "__docId__": 405,
    "kind": "member",
    "name": "vertices",
    "memberof": "tp1/primitives/MyTriangle.js~MyTriangle",
    "static": false,
    "longname": "tp1/primitives/MyTriangle.js~MyTriangle#vertices",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 406,
    "kind": "member",
    "name": "indices",
    "memberof": "tp1/primitives/MyTriangle.js~MyTriangle",
    "static": false,
    "longname": "tp1/primitives/MyTriangle.js~MyTriangle#indices",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "number[]"
      ]
    }
  },
  {
    "__docId__": 407,
    "kind": "member",
    "name": "normals",
    "memberof": "tp1/primitives/MyTriangle.js~MyTriangle",
    "static": false,
    "longname": "tp1/primitives/MyTriangle.js~MyTriangle#normals",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 408,
    "kind": "member",
    "name": "primitiveType",
    "memberof": "tp1/primitives/MyTriangle.js~MyTriangle",
    "static": false,
    "longname": "tp1/primitives/MyTriangle.js~MyTriangle#primitiveType",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 409,
    "kind": "method",
    "name": "updateTexCoords",
    "memberof": "tp1/primitives/MyTriangle.js~MyTriangle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/primitives/MyTriangle.js~MyTriangle#updateTexCoords",
    "access": "public",
    "description": "",
    "lineNumber": 98,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "updateTexCoords\nUpdates the list of texture coordinates of the triangle"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "coords",
        "description": "Array of texture coordinates"
      }
    ],
    "return": null
  },
  {
    "__docId__": 410,
    "kind": "member",
    "name": "texCoords",
    "memberof": "tp1/primitives/MyTriangle.js~MyTriangle",
    "static": false,
    "longname": "tp1/primitives/MyTriangle.js~MyTriangle#texCoords",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 411,
    "kind": "method",
    "name": "updateTexLength",
    "memberof": "tp1/primitives/MyTriangle.js~MyTriangle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/primitives/MyTriangle.js~MyTriangle#updateTexLength",
    "access": "public",
    "description": "Updates the texture coordinates of the triangle according to the given lengths.",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "length_u",
        "description": "Horizontal length of the texture"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "length_v",
        "description": "Vertical length of the texture"
      }
    ],
    "return": null
  },
  {
    "__docId__": 412,
    "kind": "file",
    "name": "tp1/rendering/MaterialUpdater.js",
    "content": "/**\n * Updates the material of all the components in the scene.\n */\nexport class MaterialUpdater {\n    /**\n     * @param {CGFscene} scene - Reference to MyScene object\n     */\n    constructor(sceneData) { \n        this.sceneData = sceneData;\n    }\n\n    /**\n     * Updates the material of all the components in the scene.\n     */\n    update() {\n        for (const component of Object.values(this.sceneData.components)) {\n            component.updateMaterial();\n        }\n    }\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/rendering/MaterialUpdater.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 413,
    "kind": "class",
    "name": "MaterialUpdater",
    "memberof": "tp1/rendering/MaterialUpdater.js",
    "static": true,
    "longname": "tp1/rendering/MaterialUpdater.js~MaterialUpdater",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/rendering/MaterialUpdater.js",
    "importStyle": "{MaterialUpdater}",
    "description": "Updates the material of all the components in the scene.",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 414,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "tp1/rendering/MaterialUpdater.js~MaterialUpdater",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/rendering/MaterialUpdater.js~MaterialUpdater#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "CGFscene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "Reference to MyScene object"
      }
    ]
  },
  {
    "__docId__": 415,
    "kind": "member",
    "name": "sceneData",
    "memberof": "tp1/rendering/MaterialUpdater.js~MaterialUpdater",
    "static": false,
    "longname": "tp1/rendering/MaterialUpdater.js~MaterialUpdater#sceneData",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 416,
    "kind": "method",
    "name": "update",
    "memberof": "tp1/rendering/MaterialUpdater.js~MaterialUpdater",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/rendering/MaterialUpdater.js~MaterialUpdater#update",
    "access": "public",
    "description": "Updates the material of all the components in the scene.",
    "lineNumber": 15,
    "params": [],
    "return": null
  },
  {
    "__docId__": 417,
    "kind": "file",
    "name": "tp1/rendering/SceneRenderer.js",
    "content": "import {PrimitiveNode} from \"../models/graph/PrimitiveNode.js\";\n\nexport class SceneRenderer {\n    constructor(sceneData) {\n        this.sceneData = sceneData;\n    }\n\n    display(node=this.sceneData.components[this.sceneData.root], parentMaterial=null, parentTexture=null) {\n        if(node instanceof PrimitiveNode){\n            this.displayPrimitive(node, parentTexture);\n        } else {\n            this.displayComponent(node, parentMaterial, parentTexture);\n        }\n    }\n\n    displayPrimitive(node, texture) {\n        const obj = node.getObject();\n        if(texture !== \"inherit\" && texture !== \"none\"){\n            obj.updateTexLength(texture.getLength_s(), texture.getLength_t());\n        }\n        node.getObject().display();\n    }\n\n    displayComponent(node, parentMaterial, parentTexture) {\n        const matrix = node.getTransformation() != null ? node.getTransformation() : mat4.create();\n        const scene = this.sceneData.scene;\n\n        let material = node.getMaterial();\n        if(material === \"inherit\") {\n            material = parentMaterial;\n        }\n\n        material.getCGFAppearance().apply();\n\n\n        let texture = node.getTexture();\n        if(texture === \"inherit\") {\n            texture = parentTexture;\n        }\n        if(texture !== \"none\") {\n            texture.getCGFTexture().bind(0);\n        }\n\n        scene.pushMatrix();\n        scene.multMatrix(matrix);\n\n        for(const child of node.getChildren()){\n            this.display(child, material, texture);\n        }\n\n        scene.popMatrix();\n    }\n\n    /*\n    display(sceneData, parentMaterial=\"\", parentTexture=null){\n    var matrix = this.transformationId != null ? sceneData.getTransformation(this.transformationId) : mat4.create();\n    var scene = sceneData.getScene();\n\n    let material = this.materialIds[this.currentMaterial];\n    if(material == 'inherit'){\n    material = parentMaterial;\n    }\n\n    sceneData.getMaterial(material).apply();\n\n    var texture = this.texture.apply(parentTexture, sceneData);\n\n    // Save matrix\n    scene.pushMatrix();\n\n    // Apply transformation\n    scene.multMatrix(matrix);\n\n    // Display children\n    for(var child of this.children){\n    child.display(sceneData, material, texture);\n    }\n    // Restore matrix\n    scene.popMatrix();\n    } */\n}",
    "static": true,
    "longname": "/home/filipe/feup/sgi/tp1/rendering/SceneRenderer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 418,
    "kind": "class",
    "name": "SceneRenderer",
    "memberof": "tp1/rendering/SceneRenderer.js",
    "static": true,
    "longname": "tp1/rendering/SceneRenderer.js~SceneRenderer",
    "access": "public",
    "export": true,
    "importPath": "sgi/tp1/rendering/SceneRenderer.js",
    "importStyle": "{SceneRenderer}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 419,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "tp1/rendering/SceneRenderer.js~SceneRenderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/rendering/SceneRenderer.js~SceneRenderer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 420,
    "kind": "member",
    "name": "sceneData",
    "memberof": "tp1/rendering/SceneRenderer.js~SceneRenderer",
    "static": false,
    "longname": "tp1/rendering/SceneRenderer.js~SceneRenderer#sceneData",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 421,
    "kind": "method",
    "name": "display",
    "memberof": "tp1/rendering/SceneRenderer.js~SceneRenderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/rendering/SceneRenderer.js~SceneRenderer#display",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "optional": true,
        "types": [
          "*"
        ]
      },
      {
        "name": "parentMaterial",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      },
      {
        "name": "parentTexture",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      }
    ],
    "return": null
  },
  {
    "__docId__": 422,
    "kind": "method",
    "name": "displayPrimitive",
    "memberof": "tp1/rendering/SceneRenderer.js~SceneRenderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/rendering/SceneRenderer.js~SceneRenderer#displayPrimitive",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "texture",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 423,
    "kind": "method",
    "name": "displayComponent",
    "memberof": "tp1/rendering/SceneRenderer.js~SceneRenderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "tp1/rendering/SceneRenderer.js~SceneRenderer#displayComponent",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "parentMaterial",
        "types": [
          "*"
        ]
      },
      {
        "name": "parentTexture",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "# SGI 2022/2023\n\n## Group T04G05\n| Name                          | Number    | E-Mail                   |\n| ----------------------------- | --------- | ------------------------ |\n| Filipe Pinto Campos           | 201905609 | up201905609@edu.fe.up.pt |\n| Francisco Gonçalves Cerqueira | 201905337 | up201905337@edu.fe.up.pt |\n\n----\n\n## Projects\n\n### [TP1 - Scene Graph](tp1)\n\n- (items briefly describing main strong points)\n- Scene\n  - (Brief description of the created scene)\n  - (relative link to the scene)\n\n-----\n\n### [TP2 - ...](tp2)\n- (items briefly describing main strong points)\n\n----\n\n### [TP3 - ...](tp3)\n- (items briefly describing main strong points)",
    "longname": "/home/filipe/feup/sgi/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"sgi\",\n  \"version\": \"1.0.0\",\n  \"description\": \"## Group T04G05 | Name                          | Number    | E-Mail                   | | ----------------------------- | --------- | ------------------------ | | Filipe Pinto Campos           | 201905609 | up201905609@edu.fe.up.pt | | Francisco Gonçalves Cerqueira | 201905337 | up201905337@edu.fe.up.pt |\",\n  \"main\": \"index.js\",\n  \"directories\": {\n    \"lib\": \"lib\"\n  },\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://git.fe.up.pt/sgi-meic/sgi-2022-2023/t04/sgi-t04-g05.git\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\"\n  }\n}\n",
    "longname": "/home/filipe/feup/sgi/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]